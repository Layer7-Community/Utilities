{
	"info": {
		"_postman_id": "fdd83205-7cba-4792-b7f1-7f62bdb17ac9",
		"name": "OTK API Collection - AuthCode/Self Signed JWT PAR",
		"description": "With FAPI basic profile set to true, this collection\n\n1.  Creates a client with token endpoint authentication method set to 'self_signed_jwt'\n2.  **Initiates Authorization** code grant flow.\n3.  **Login** using user credentials.\n4.  Gives **Consent**\n5.  Gets **grant** (code)\n6.  Exchanges code for **Token**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "626938"
	},
	"item": [
		{
			"name": "Lib install",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200)",
							"    pm.globals.set(\"pmlib_code\", responseBody)",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://joolfe.github.io/postman-util-lib/dist/bundle.js",
					"protocol": "https",
					"host": [
						"joolfe",
						"github",
						"io"
					],
					"path": [
						"postman-util-lib",
						"dist",
						"bundle.js"
					]
				},
				"description": "Load the postman-util-lib from github.io and load into postman global variable."
			},
			"response": []
		},
		{
			"name": "OpenID Connect Dynamic Registration endpoint",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(201);\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.environment.set('otk.temp.client_id', responseJson.client_id)\r",
							"  pm.environment.set('otk.temp.client_secret', responseJson.client_secret)\r",
							"  pm.environment.set('otk.temp.registration_access_token', responseJson.registration_access_token)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"redirect_uris\": [\n        \"{{otk.redirectUri}}\"\n    ],\n    \"post_logout_redirect_uris\" : [\"https://www.google.com\"],\n    \"response_types\": [\n        \"code id_token\"\n    ],\n    \"grant_types\": [\n        \"authorization_code\"\n    ],\n    \"application_type\": \"web\",\n    \"contacts\": [\n        \"user1@ca.com\",\n        \"user2@ca.com\"\n    ],\n    \"client_name\": \"OTKClient-{{$timestamp}}\",\n    \"subject_type\": \"pairwise\",\n    \"id_token_signed_response_alg\": \"PS256\",\n    \"token_endpoint_auth_method\": \"private_key_jwt\",\n    \"jwks\": {\n        \"keys\": [\n            {{otk.jwk.public}}\n        ]\n    },\n    \"authorization_signed_response_alg\": \"PS256\",\n    \"scope\": \"openid\",\n    \"environment\": \"ALL\",\n    \"master\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{otk.host}}:{{otk.port}}/openid/connect/register",
					"protocol": "https",
					"host": [
						"{{otk.host}}"
					],
					"port": "{{otk.port}}",
					"path": [
						"openid",
						"connect",
						"register"
					]
				},
				"description": "This endpoint follows the specification defined at http://openid.net/specs/openid-connect-registration-1_0.html. It enables a client to dynamically register itself as an OAuth 2.0 client."
			},
			"response": []
		},
		{
			"name": "PAR",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Loading the library\r",
							"eval(pm.globals.get('pmlib_code'))\r",
							"\r",
							"function randomString(minValue, maxValue, dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\r",
							"    if (!minValue) {\r",
							"        minValue = 20;\r",
							"        maxValue = 20;\r",
							"    }\r",
							"\r",
							"    if (!maxValue) {\r",
							"        maxValue = minValue;\r",
							"    }\r",
							"\r",
							"    let length = _.random(minValue, maxValue),\r",
							"        randomString = \"\";\r",
							"\r",
							"    for (let i = 0; i < length; i++)\r",
							"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
							"    return randomString;\r",
							"}\r",
							"\r",
							"code_verifier = randomString(45,142)\r",
							"pm.environment.set('otk.temp.code_verifier', code_verifier)\r",
							"\r",
							"var utf8arr = CryptoJS.enc.Utf8.parse(code_verifier);\r",
							"var hash = CryptoJS.SHA256(utf8arr);\r",
							"var base64 = CryptoJS.enc.Base64.stringify(hash);\r",
							"base64 = base64.replace(/=/g, \"\")\r",
							"base64 = base64.replace(/\\+/g, \"-\")\r",
							"base64 = base64.replace(/\\//g, \"_\")\r",
							"pm.environment.set('otk.temp.code_challenge', base64)\r",
							"\r",
							"clientId = pm.environment.get('otk.temp.client_id')\r",
							"host = pm.environment.get('otk.host')\r",
							"port = pm.environment.get('otk.port')\r",
							"otklUrl = 'https://'+ host + ':' + port\r",
							"tokenUrl = otklUrl + '/auth/oauth/v2/token'\r",
							"deviceAuthUrl = otklUrl + '/auth/oauth/v2/device-authorization'\r",
							"bcauthorize = otklUrl + '/oauth/v2/bc-authorize'\r",
							"\r",
							"state = pm.variables.replaceIn('{{$guid}}')\r",
							"nonce = pm.variables.replaceIn('{{$randomColor}}')\r",
							"redirectUri= pm.environment.get('otk.redirectUri')\r",
							"jwk = JSON.parse(pm.environment.get('otk.jwk'))\r",
							"\r",
							"// Create a signed jwt (JWS)\r",
							"const clientAssertion = pmlib.jwtSign(jwk,payload = { \r",
							"              aud: [otklUrl, tokenUrl, deviceAuthUrl, bcauthorize],\r",
							"              iss: clientId,\r",
							"              sub: clientId\r",
							"            }, header = {}, exp = 600, alg = 'RS256')\r",
							"\r",
							"const requestObject = pmlib.jwtSign(jwk, payload = {\r",
							"              aud: [otklUrl, clientId],\r",
							"              iss: clientId, \r",
							"              response_type: 'code id_token',\r",
							"              client_id: clientId,\r",
							"              redirect_uri: redirectUri,\r",
							"              scope: 'openid', \r",
							"              nonce : nonce,\r",
							"              state: state,\r",
							"              acr_values: 'sample',\r",
							"              code_challenge: base64,\r",
							"              code_challenge_method: 's256',\r",
							"              response_mode: 'query.jwt'\r",
							"            }, header = {}, exp = 600, alg = 'PS256')\r",
							"\r",
							"pm.variables.set('otk.temp.client_assertion', clientAssertion)\r",
							"pm.variables.set('otk.temp.request_object', requestObject)\r",
							"pm.environment.set('otk.temp.nonce', nonce)\r",
							"pm.environment.set('otk.temp.state', state)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Load the HTML response to $\r",
							"const $ = cheerio.load(pm.response.text());\r",
							"\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(201);\r",
							"  pm.expect(pm.response.text()).to.include(\"request_uri\");\r",
							"  pm.expect(pm.response.text()).to.include(\"expires_in\");\r",
							"  let responseData=pm.response.json();\r",
							"  pm.environment.set('otk.temp.request_uri', responseData.request_uri)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{otk.temp.client_id}}",
							"type": "text"
						},
						{
							"key": "response_type",
							"value": "code id_token",
							"type": "text"
						},
						{
							"key": "client_assertion",
							"value": "{{otk.temp.client_assertion}}",
							"type": "text"
						},
						{
							"key": "client_assertion_type",
							"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
							"type": "text"
						},
						{
							"key": "request",
							"value": "{{otk.temp.request_object}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{otk.host}}:{{otk.port}}/auth/oauth/v2/par",
					"protocol": "https",
					"host": [
						"{{otk.host}}"
					],
					"port": "{{otk.port}}",
					"path": [
						"auth",
						"oauth",
						"v2",
						"par"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorization",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Load the HTML response to $\r",
							"const $ = cheerio.load(pm.response.text());\r",
							"\r",
							"pm.test(\"Status code is 302\", () => {\r",
							"    \r",
							"  pm.expect(pm.response.code).to.eql(302);\r",
							"  let location = pm.response.headers.get('location');\r",
							"  const paramsString = location.split('?')[1];\r",
							"   const eachParamArray = paramsString.split('&');\r",
							"   let params = {};\r",
							"    eachParamArray.forEach((param) => {\r",
							"        const key = param.split('=')[0];\r",
							"        const value = param.split('=')[1];\r",
							"        if(key == 'sessionID') {\r",
							"           pm.environment.set('otk.temp.session_id', value)\r",
							"        }\r",
							"         if(key == 'sessionData') {\r",
							"           pm.environment.set('otk.temp.session_data', value)\r",
							"        }  \r",
							"        Object.assign(params, {[key]: value});\r",
							"    })\r",
							"\r",
							"  console.log(params)\r",
							"  console.log(location)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"followRedirects": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "https://{{otk.host}}:{{otk.port}}/auth/oauth/v2/authorize?client_id={{otk.temp.client_id}}&request_uri={{otk.temp.request_uri}}",
					"protocol": "https",
					"host": [
						"{{otk.host}}"
					],
					"port": "{{otk.port}}",
					"path": [
						"auth",
						"oauth",
						"v2",
						"authorize"
					],
					"query": [
						{
							"key": "client_id",
							"value": "{{otk.temp.client_id}}"
						},
						{
							"key": "request_uri",
							"value": "{{otk.temp.request_uri}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Load the HTML response to $\r",
							"const $ = cheerio.load(pm.response.text());\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"  pm.expect(pm.response.text()).to.include(\"sessionID\");\r",
							"  pm.expect(pm.response.text()).to.include(\"sessionData\");\r",
							"  pm.expect(pm.response.text()).to.include(\"action\");\r",
							"  sessionId = $(\"[name=sessionID]\").attr('value'); // get session id\r",
							"  sessionData = $(\"[name=sessionData]\").attr('value'); // get session data\r",
							"  pm.environment.set('otk.temp.sessionI_id', sessionId)\r",
							"  pm.environment.set('otk.temp.session_data', sessionData)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "password",
							"value": "{{otk.password}}",
							"type": "text"
						},
						{
							"key": "sessionData",
							"value": "{{otk.temp.session_data}}",
							"type": "text"
						},
						{
							"key": "action",
							"value": "login",
							"type": "text"
						},
						{
							"key": "sessionID",
							"value": "{{otk.temp.session_id}}",
							"type": "text"
						},
						{
							"key": "username",
							"value": "{{otk.username}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{otk.host}}:{{otk.port}}/auth/oauth/v2/authorize/login",
					"protocol": "https",
					"host": [
						"{{otk.host}}"
					],
					"port": "{{otk.port}}",
					"path": [
						"auth",
						"oauth",
						"v2",
						"authorize",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Consent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Load the HTML response to $\r",
							"const $ = cheerio.load(pm.response.text());\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"  pm.expect(pm.response.text()).to.include(\"sessionID\");\r",
							"  pm.expect(pm.response.text()).to.include(\"sessionData\");\r",
							"  sessionId = $(\"[name=sessionID]\").attr('value'); // get session id\r",
							"  sessionData = $(\"[name=sessionData]\").attr('value'); // get session data\r",
							"  pm.environment.set('otk.temp.session_id', sessionId)\r",
							"  pm.environment.set('otk.temp.session_data', sessionData)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "sessionData",
							"value": "{{otk.temp.session_data}}",
							"type": "text"
						},
						{
							"key": "action",
							"value": "consent",
							"type": "text"
						},
						{
							"key": "sessionID",
							"value": "{{otk.temp.session_id}}",
							"type": "text"
						},
						{
							"key": "response_mode",
							"value": "query.jwt",
							"type": "text",
							"disabled": true
						},
						{
							"key": "response_type",
							"value": "code",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "https://{{otk.host}}:{{otk.port}}/auth/oauth/v2/authorize/consent",
					"protocol": "https",
					"host": [
						"{{otk.host}}"
					],
					"port": "{{otk.port}}",
					"path": [
						"auth",
						"oauth",
						"v2",
						"authorize",
						"consent"
					]
				}
			},
			"response": []
		},
		{
			"name": "Grant",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Load the HTML response to $\r",
							"const $ = cheerio.load(pm.response.text());\r",
							"\r",
							"pm.test(\"Status code is 302\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(302);\r",
							"  fapi = pm.environment.get('otk.fapi')\r",
							"  let location = postman.getResponseHeader(\"Location\")\r",
							"\r",
							"//   if(fapi == 'false'){\r",
							"//     let code = location.match(/code=(.*)(&|$)/)[1];\r",
							"//     pm.environment.set('otk.temp.authorizationCode', code)\r",
							"//   } else {\r",
							"    let reponseJWT = location.match(/response=(.*)(&|$)/)[1];\r",
							"    pm.environment.set('otk.temp.codeJWT', reponseJWT)\r",
							"    let [jwtHeader, jwtPayload, jwtSignature] = reponseJWT.split('.')\r",
							"    let jwtPayloadJsonString = atob(jwtPayload)\r",
							"    let jwtPayloadJson = JSON.parse(jwtPayloadJsonString)\r",
							"    pm.environment.set('otk.temp.authorization_code', jwtPayloadJson.code)\r",
							"//  }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "sessionData",
							"value": "{{otk.temp.session_data}}",
							"type": "text"
						},
						{
							"key": "action",
							"value": "Grant",
							"type": "text"
						},
						{
							"key": "sessionID",
							"value": "{{otk.temp.session_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{otk.host}}:{{otk.port}}/auth/oauth/v2/authorize/consent",
					"protocol": "https",
					"host": [
						"{{otk.host}}"
					],
					"port": "{{otk.port}}",
					"path": [
						"auth",
						"oauth",
						"v2",
						"authorize",
						"consent"
					]
				}
			},
			"response": []
		},
		{
			"name": "Token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Loading the library\r",
							"eval(pm.globals.get('pmlib_code'))\r",
							"clientId = pm.environment.get('otk.temp.client_id')\r",
							"host = pm.environment.get('otk.host')\r",
							"port = pm.environment.get('otk.port')\r",
							"otklUrl = 'https://'+ host + ':' + port\r",
							"state = pm.environment.get('otk.temp.state')\r",
							"nonce = pm.environment.get('otk.temp.nonce')\r",
							"jwk = JSON.parse(pm.environment.get('otk.jwk'))\r",
							"redirectUri= pm.environment.get('otk.redirectUri')\r",
							"// Create a signed jwt (JWS)\r",
							"const jws = pmlib.jwtSign(jwk, { \r",
							"              aud: [otklUrl,clientId],\r",
							"              iss: clientId\r",
							"             })\r",
							"\r",
							"privateKeyJwt = pmlib.clientAssertPrivateKey(jwk, clientId, otklUrl +'/auth/oauth/v2/token')\r",
							"pm.variables.set('otk.temp.client_assertion', privateKeyJwt)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.access_token).is.not.oneOf([null, undefined]);\r",
							"  pm.expect(responseJson.refresh_token).is.not.oneOf([null, undefined]);\r",
							"  pm.expect(responseJson.id_token).is.not.oneOf([null, undefined]);\r",
							"  pm.expect(responseJson.scope).to.eql('openid');\r",
							"  pm.environment.set('otk.temp.idToken', responseJson.id_token)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "text"
						},
						{
							"key": "code",
							"value": "{{otk.temp.authorization_code}}",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "{{otk.temp.client_id}}",
							"type": "text"
						},
						{
							"key": "redirect_uri",
							"value": "{{otk.redirectUri}}",
							"type": "text"
						},
						{
							"key": "client_assertion_type",
							"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
							"type": "text"
						},
						{
							"key": "client_assertion",
							"value": "{{otk.temp.client_assertion}}",
							"type": "text"
						},
						{
							"key": "code_verifier",
							"value": "{{otk.temp.code_verifier}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{otk.host}}:{{otk.port}}/auth/oauth/v2/token",
					"protocol": "https",
					"host": [
						"{{otk.host}}"
					],
					"port": "{{otk.port}}",
					"path": [
						"auth",
						"oauth",
						"v2",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate Token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{otk.temp.access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "https://{{otk.host}}:{{otk.port}}/oauth/v2/protectedapi",
					"protocol": "https",
					"host": [
						"{{otk.host}}"
					],
					"port": "{{otk.port}}",
					"path": [
						"oauth",
						"v2",
						"protectedapi"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Client",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"function clearVariables() {\r",
							"    // Get all the names of our env variables and put them in an array\r",
							"    const environmentVariables = pm.environment.values.map(function(variable) {\r",
							"        return variable.key;\r",
							"    });\r",
							"    \r",
							"    const binTheseVariablesOff = environmentVariables.filter(function(variable) {\r",
							"        return variable.match(\"otk.temp\");\r",
							"    });\r",
							"\r",
							"    // Now go through this new array and delete these env variables\r",
							"    return binTheseVariablesOff.forEach(function(variableName) {\r",
							"       pm.environment.unset(variableName);\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(204);\r",
							"  clearVariables();\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{otk.temp.registration_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{otk.host}}:{{otk.port}}/openid/connect/register/{{otk.temp.client_id}}",
					"protocol": "https",
					"host": [
						"{{otk.host}}"
					],
					"port": "{{otk.port}}",
					"path": [
						"openid",
						"connect",
						"register",
						"{{otk.temp.client_id}}"
					]
				},
				"description": "This endpoint follows the specification defined at http://openid.net/specs/openid-connect-registration-1_0.html. It enables a client to dynamically register itself as an OAuth 2.0 client."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "otk.host",
			"value": "",
			"type": "string"
		},
		{
			"key": "otk.port",
			"value": "",
			"type": "string"
		},
		{
			"key": "otk.jwk",
			"value": "",
			"type": "string"
		},
		{
			"key": "otk.jwk.public",
			"value": "",
			"type": "string"
		},
		{
			"key": "otk.redirectUri",
			"value": "",
			"type": "string"
		},
		{
			"key": "otk.username",
			"value": "",
			"type": "string"
		},
		{
			"key": "otk.password",
			"value": "",
			"type": "string"
		}
	]
}