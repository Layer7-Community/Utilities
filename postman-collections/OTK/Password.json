{
	"info": {
		"_postman_id": "1af2cde3-3b18-4455-baf1-e6a9e32b5146",
		"name": "OTK API Collection - Password",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "626938"
	},
	"item": [
		{
			"name": "Client Register - External (DMZ)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(201);\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.environment.set('otk.temp.client_id', responseJson.client_id);\r",
							"  pm.environment.set('otk.temp.client_secret', responseJson.client_secret);\r",
							"  pm.environment.set('otk.temp.registration_access_token', responseJson.registration_access_token);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"client_name\": \"OTKClient-pmc-{{$timestamp}}\",\r\n    \"description\": \"Registered via OpenID Connect Dynamic Registration\",\r\n    \"redirect_uris\": [\"{{otk.redirectUri}}\"],\r\n    \"grant_types\": [\"refresh_token\", \"password\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{otk.host}}:{{otk.port}}/openid/connect/register",
					"protocol": "https",
					"host": [
						"{{otk.host}}"
					],
					"port": "{{otk.port}}",
					"path": [
						"openid",
						"connect",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Access Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.access_token).is.not.oneOf([null, undefined]);\r",
							"  pm.environment.set('otk.temp.access_token', responseJson.access_token)\r",
							"  pm.collectionVariables.set(\"otk.temp.refresh_token\", responseJson.refresh_token);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "{{otk.temp.client_id}}",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{otk.temp.client_secret}}",
							"type": "text"
						},
						{
							"key": "username",
							"value": "{{otk.username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{otk.password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{otk.host}}:{{otk.port}}/auth/oauth/v2/token",
					"protocol": "https",
					"host": [
						"{{otk.host}}"
					],
					"port": "{{otk.port}}",
					"path": [
						"auth",
						"oauth",
						"v2",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.client_id).to.eql(pm.environment.get('otk.temp.client_id'));\r",
							"    pm.expect(pm.response.text()).to.include(\"expires_at\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{otk.temp.access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://{{otk.host}}:{{otk.port}}/oauth/v2/protectedapi",
					"protocol": "https",
					"host": [
						"{{otk.host}}"
					],
					"port": "{{otk.port}}",
					"path": [
						"oauth",
						"v2",
						"protectedapi"
					]
				}
			},
			"response": []
		},
		{
			"name": "Refresh Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.access_token).is.not.oneOf([null, undefined]);\r",
							"  pm.environment.set('otk.temp.access_token', responseJson.access_token)\r",
							"  pm.collectionVariables.set(\"otk.temp.refresh_token\", responseJson.refresh_token);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{otk.temp.client_id}}",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{otk.temp.client_secret}}",
							"type": "text"
						},
						{
							"key": "refresh_token",
							"value": "{{otk.temp.refresh_token}}",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "refresh_token",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{otk.host}}:{{otk.port}}/auth/oauth/v2/token",
					"protocol": "https",
					"host": [
						"{{otk.host}}"
					],
					"port": "{{otk.port}}",
					"path": [
						"auth",
						"oauth",
						"v2",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate New Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.client_id).to.eql(pm.environment.get('otk.temp.client_id'));\r",
							"    pm.expect(pm.response.text()).to.include(\"expires_at\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{otk.temp.access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://{{otk.host}}:{{otk.port}}/oauth/v2/protectedapi",
					"protocol": "https",
					"host": [
						"{{otk.host}}"
					],
					"port": "{{otk.port}}",
					"path": [
						"oauth",
						"v2",
						"protectedapi"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Client",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"function clearVariables() {\r",
							"    // Get all the names of our env variables and put them in an array\r",
							"    const environmentVariables = pm.environment.values.map(function(variable) {\r",
							"        return variable.key;\r",
							"    });\r",
							"    \r",
							"    const binTheseVariablesOff = environmentVariables.filter(function(variable) {\r",
							"        return variable.match(\"otk.temp\");\r",
							"    });\r",
							"\r",
							"    // Now go through this new array and delete these env variables\r",
							"    return binTheseVariablesOff.forEach(function(variableName) {\r",
							"       pm.environment.unset(variableName);\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(204);\r",
							"  clearVariables();\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{otk.temp.registration_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{otk.host}}:{{otk.port}}/openid/connect/register/{{otk.temp.client_id}}",
					"protocol": "https",
					"host": [
						"{{otk.host}}"
					],
					"port": "{{otk.port}}",
					"path": [
						"openid",
						"connect",
						"register",
						"{{otk.temp.client_id}}"
					]
				},
				"description": "This endpoint follows the specification defined at http://openid.net/specs/openid-connect-registration-1_0.html. It enables a client to dynamically register itself as an OAuth 2.0 client."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "otk_hostname",
			"value": "<hostname>"
		},
		{
			"key": "otk_port",
			"value": "8443"
		},
		{
			"key": "username",
			"value": "admin"
		},
		{
			"key": "password",
			"value": "7layer"
		},
		{
			"key": "client_name",
			"value": ""
		},
		{
			"key": "callback",
			"value": ""
		},
		{
			"key": "client_id",
			"value": ""
		},
		{
			"key": "client_secret",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "refresh_token",
			"value": ""
		},
		{
			"key": "otk.temp.refresh_token",
			"value": ""
		}
	]
}