{
	"info": {
		"_postman_id": "8870bb03-704f-4812-80e8-844784e573e7",
		"name": "Trusted Certificates Migration",
		"description": "**Pre-requisites**\n\n1.  Make sure to select GATEWAY-ENVIRONMENT-VARIABLES before running any request and fill in the below information\n    \n\n| Variable | Type | Description | **User Input** |\n| --- | --- | --- | --- |\n| gw_src_host | string | Hostname or IP address of the Source Gateway | Mandatory to provide by user |\n| gw_src_user | string | Source Gateway Username | Mandatory to provide by user |\n| gw_src_password | string | Source Gateway Password | Mandatory to provide by user |\n| gw_dst_host | string | Hostname or IP address of the Source Gateway | Mandatory to provide by user |\n| gw_dst_user | string | Destination Gateway Username | Mandatory to provide by user |\n| gw_dst_password | string | Destination Gateway Password | Mandatory to provide by user |\n\n### Certificate\n\nCertificates are either HTTPS and LDAPS certificates.This resource enables the management of those certificates.\n\nUser has choice to migrate either single Trusted Certificate or all Trusted Certificates exist in the source gateway.\n\nIf User choose to migrate single Trusted Certificate then it is mandatory to follow below 2 actions\n\n1.  provide the trustedCertificateName in the variables section of this collection(Click on collection Variables Fill intital and current values of trustedCertificateName variable)\n2.  While running collection, select only below list of API's\n    \n\nExport Single Trusted Certificate By Name\n\nImport Single Trusted Certificate\n\nIf User choose to migrate All Trusted Certificates then select only below list of API's. While running the below choosen requests then User doesn't need to provide the trustedCertificateName.\n\nExport Trusted Certificates\n\nImport Trusted Certificates\n\n**Collection Variables**\n\n| Variable | Type | Description | **User Input** |\n| --- | --- | --- | --- |\n| trustedCertificateName | string | The Name of the Trusted Certificate to return | Mandatory to provide incase of single Trusted Certificate migration. |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6652005"
	},
	"item": [
		{
			"name": "Export Single Trusted Certificate By Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var ENTITY=\"TrustedCertificate\";\r",
							"var XML_NS = \"xmlns:l7=\\\"http://ns.l7tech.com/2010/04/gateway-management\\\"\";\r",
							"var ADDITIONAL_NODE = \"\";\r",
							"var reqNodes = responseBody.substr(responseBody.indexOf('<l7:'+ENTITY+'')).replaceAll(\"\\n\", \"\");\r",
							"\r",
							"if(reqNodes) {\r",
							"    var refinedResponse = reqNodes.replaceAll(\"<l7:Resource>\", \"\").replaceAll(\"</l7:Resource>\", \"\").replaceAll(\"<l7:Item>\", \"\").replaceAll(\"</l7:Item>\", \"\").replaceAll(\"<l7:List>\", \"\").replaceAll(\"</l7:List>\", \"\").replaceAll(\"\\\\n\", \"\").replaceAll(\"\\\\\", \"\").replaceAll(\"  \", \"\");\r",
							"\r",
							"    var finalXmlEntity = refinedResponse.replace(\"</l7:Name>\", \"</l7:Name> \" + ADDITIONAL_NODE +\"\").replace(\"<l7:\"+ENTITY+\"\", \"<l7:\" + ENTITY +\" \" + XML_NS +\"\").replaceAll(\"\\\\\", \"\");\r",
							"\r",
							"    /* Removing version if exists */\r",
							"    var version = xml2Json(finalXmlEntity)['l7:'+ENTITY+'']['$']['version'];\r",
							"    const version_element = \"version=\" + \"\\\"\" + version + \"\\\"\";\r",
							"    finalXmlEntity = finalXmlEntity.replaceAll(version_element, \"\");\r",
							"\r",
							"    var trustedCertId = xml2Json(finalXmlEntity)['l7:'+ENTITY+'']['$']['id'];\r",
							"\r",
							"    pm.collectionVariables.set('singleTrustedCertIdEntityID', trustedCertId);\r",
							"    pm.collectionVariables.set(\"singleTrustedCertIdXMLBody\", finalXmlEntity);\r",
							"}\r",
							"else {\r",
							"    console.log(\"No Trusted certificate available with this name\");\r",
							"    pm.collectionVariables.set('singleTrustedCertIdEntityID', \"\");\r",
							"    pm.collectionVariables.set(\"singleTrustedCertIdXMLBody\", \"\");\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{gw_src_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{gw_src_admin}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{gw_src_host}}:{{gw_src_port}}/restman/1.0/trustedCertificates?name={{trustedCertificateName}}",
					"protocol": "https",
					"host": [
						"{{gw_src_host}}"
					],
					"port": "{{gw_src_port}}",
					"path": [
						"restman",
						"1.0",
						"trustedCertificates"
					],
					"query": [
						{
							"key": "name",
							"value": "{{trustedCertificateName}}"
						}
					]
				},
				"description": "Returns a single Trusted Certificate with the given Name from Source Gateway"
			},
			"response": []
		},
		{
			"name": "Import Single Trusted Certificate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{gw_dst_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{gw_dst_admin}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{singleTrustedCertIdXMLBody}}"
				},
				"url": {
					"raw": "https://{{gw_dst_host}}:{{gw_dst_port}}/restman/1.0/trustedCertificates/{{singleTrustedCertIdEntityID}}",
					"protocol": "https",
					"host": [
						"{{gw_dst_host}}"
					],
					"port": "{{gw_dst_port}}",
					"path": [
						"restman",
						"1.0",
						"trustedCertificates",
						"{{singleTrustedCertIdEntityID}}"
					]
				},
				"description": "Creates or Updates an existing Trusted Certificate in the Target Gateway. If a Trusted Certificate with the given Name does not exist one will be created, otherwise the existing one will be updated\n\n**Collection Variables**\n\n| Variable | Type | Description |\n| --- | --- | --- |\n| trustedCertificateName | string | The Name of the Trusted Certificate to return |"
			},
			"response": []
		},
		{
			"name": "Export Trusted Certificates",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var ENTITY=\"TrustedCertificate\";\r",
							"var XML_NS = \"xmlns:l7=\\\"http://ns.l7tech.com/2010/04/gateway-management\\\"\";\r",
							"var ADDITIONAL_NODE = \"\";\r",
							"var response = responseBody.substr(responseBody.indexOf('<l7:Item'));\r",
							"var reqNodes = response.substr(response.indexOf('<l7:'+ENTITY+''));\r",
							"var refindedResponse = JSON.stringify(reqNodes).replaceAll(\"<l7:Resource>\", \"\").replaceAll(\"</l7:Resource>\", \"\").replaceAll(\"<l7:Item>\", \"\").replaceAll(\"</l7:Item>\", \"\").replaceAll(\"<l7:List>\", \"\").replaceAll(\"</l7:List>\", \"\").replaceAll(\"\\\\n\", \"\");\r",
							"let listOfEntities = refindedResponse.split(\"</l7:\" + ENTITY + \">\");\r",
							"let entities;\r",
							"for (var e in listOfEntities) {\r",
							"    if (e < listOfEntities.length-1) {\r",
							"        var entity = listOfEntities[e].substr(listOfEntities[e].indexOf(\"<l7:\"+ENTITY)) + \"</l7:\"+ENTITY+\">\";\r",
							"        /* 1. Entity is ready with all necessary input data. */\r",
							"        var finalEntity = JSON.stringify(entity).replace(\"</l7:Name>\", \"</l7:Name> \" + ADDITIONAL_NODE +\"\").replace(\"<l7:\"+ENTITY+\"\", \"<l7:\" + ENTITY +\" \" + XML_NS +\"\").replaceAll(\"\\\\\", \"\");\r",
							"        var finalXmlEntity = finalEntity.substr(1, finalEntity.length-2);\r",
							"        /* 2. Fetching id */\r",
							"        var finalJsonEntity = xml2Json(finalXmlEntity);\r",
							"        var id = finalJsonEntity['l7:'+ENTITY+'']['$']['id']\r",
							"        var version = finalJsonEntity['l7:'+ENTITY+'']['$']['version']\r",
							"        /* 3. Removing version if it exists */\r",
							"        const version_element = \"version=\" + \"\\\"\" + version + \"\\\"\";\r",
							"        finalXmlEntity = finalXmlEntity.replaceAll(version_element, \"\");\r",
							"        /* 4. Preparing entity node array list. */\r",
							"        if(!entities || entities.length == 0) {\r",
							"            entities = [id + \"ID_ENTITY\" + finalXmlEntity + \"END_ENTITY\"];\r",
							"        } else {\r",
							"            entities = entities + [id + \"ID_ENTITY\" + finalXmlEntity + \"END_ENTITY\"];\r",
							"        }\r",
							"    }\r",
							"}\r",
							"//console.log(entities);\r",
							"/* Setting Response to the postman collection */\r",
							"if (entities && entities.length >= 1) {\r",
							"    if(entities.length > 1) {\r",
							"        entities =  entities.substr(0, entities.length-10);\r",
							"        let lstEntities = entities.split(\"END_ENTITY\");\r",
							"        pm.collectionVariables.set('lstEntitiesArr', lstEntities);\r",
							"    } else {\r",
							"        pm.collectionVariables.set('lstEntitiesArr', entities);\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{gw_src_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{gw_src_admin}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{gw_src_host}}:{{gw_src_port}}/restman/1.0/trustedCertificates",
					"protocol": "https",
					"host": [
						"{{gw_src_host}}"
					],
					"port": "{{gw_src_port}}",
					"path": [
						"restman",
						"1.0",
						"trustedCertificates"
					]
				},
				"description": "Returns All Trusted Certificates from Source Gateway"
			},
			"response": []
		},
		{
			"name": "Import Trusted Certificates",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let lstEntities = pm.collectionVariables.get('lstEntitiesArr');\r",
							"if (lstEntities && lstEntities.length > 0) {\r",
							"    /* Reading first entity and remove from the list\r",
							"    DONT FORGET TO SETUP AGAIN TO COLLCTIONS VARIABLES. */\r",
							"    let currentEntity = lstEntities.shift();\r",
							"    //console.log(\"currentEntity  is:   \"+currentEntity);\r",
							"    let currentEntityArray =  currentEntity.split(\"ID_ENTITY\");\r",
							"    let currentEntityId = currentEntityArray[0];\r",
							"    let currentEntityXML = currentEntityArray[1];\r",
							"    currentEntityXML = currentEntityXML.replaceAll(\"END_ENTITY\", \"\");\r",
							"    /* Setting id, request body to collectionVariables for furhur processing. */\r",
							"    pm.collectionVariables.set(\"trustedCertEntityID\", currentEntityId);\r",
							"    pm.collectionVariables.set(\"trustedCertXMLBody\", currentEntityXML);\r",
							"    /* Setting modified (One entity removed for processing) entities again to environment */\r",
							"    pm.collectionVariables.set('lstEntitiesArr', lstEntities);\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const lstEntities = pm.collectionVariables.get('lstEntitiesArr');\r",
							"if (lstEntities && lstEntities.length > 0){\r",
							"    postman.setNextRequest(\"Import Trusted Certificates\");\r",
							"} else {\r",
							"    //postman.setNextRequest(null);\r",
							"    pm.collectionVariables.unset(\"trustedCertEntityID\");\r",
							"    pm.collectionVariables.unset(\"trustedCertXMLBody\");\r",
							"}\r",
							"pm.test(\"Status code is 200|201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{gw_dst_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{gw_dst_admin}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{trustedCertXMLBody}}"
				},
				"url": {
					"raw": "https://{{gw_dst_host}}:{{gw_dst_port}}/restman/1.0/trustedCertificates/{{trustedCertEntityID}}",
					"protocol": "https",
					"host": [
						"{{gw_dst_host}}"
					],
					"port": "{{gw_dst_port}}",
					"path": [
						"restman",
						"1.0",
						"trustedCertificates",
						"{{trustedCertEntityID}}"
					]
				},
				"description": "Creates or Updates an existing Trusted Certificate in the Target Gateway. If a Trusted Certificate does not exist one will be created, otherwise the existing one will be updated\n\nNote: User doesn't need to pass the \"trustedCertEntityID\" in the API Path because the ID will automatically be updated in this API path after Get call for Export Trusted Certificates is executed."
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "7layer",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "trustedCertificateName",
			"value": "trustedCertificateName",
			"type": "string"
		},
		{
			"key": "lstEntitiesArr",
			"value": ""
		},
		{
			"key": "singleTrustedCertIdEntityID",
			"value": ""
		},
		{
			"key": "singleTrustedCertIdXMLBody",
			"value": ""
		}
	]
}