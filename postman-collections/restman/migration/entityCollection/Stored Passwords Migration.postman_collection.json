{
	"info": {
		"_postman_id": "6deb48c1-9bd0-4c4e-89dc-80cf9cbfcc43",
		"name": "Stored Passwords Migration",
		"description": "**Pre-requisites**\n\n1.  Make sure to select GATEWAY-ENVIRONMENT-VARIABLES before running any request and fill in the below information\n    \n\n| Variable | Type | Description | **User Input** |\n| --- | --- | --- | --- |\n| gw_src_host | string | Hostname or IP address of the Source Gateway | Mandatory to provide by user |\n| gw_src_user | string | Source Gateway Username | Mandatory to provide by user |\n| gw_src_password | string | Source Gateway Password | Mandatory to provide by user |\n| gw_dst_host | string | Hostname or IP address of the Source Gateway | Mandatory to provide by user |\n| gw_dst_user | string | Destination Gateway Username | Mandatory to provide by user |\n| gw_dst_password | string | Destination Gateway Password | Mandatory to provide by user |\n\nNote: All the secure passwords are migrated with default password as \"password\". So, After migration, user have to manually change the password value of secure password in the target gateway for each secure password.\n\n### Secure Password\n\nSecure passwords are used to securely store passwords and plain text PEM private keys in the Gateway database.\n\nUser has choice to migrate either single Secure password or all Secure passwords exist in the source gateway.\n\nIf User choose to migrate single Secure password then it is mandatory to follow below 2 actions\n\n1.  provide the securePasswordName in the variables section of this collection(Click on collection Variables Fill intital and current values of securePasswordName variable)\n2.  While running collection, select only below list of API's\n    \n\nExport Single Secure Password By Name\n\nImport Single Secure Password\n\nIf User choose to migrate All Secure passwords then select only below list of API's. While running the below choosen requests then User doesn't need to provide the securePasswordName.\n\nExport All Secure Passwords\n\nImport All Secure Passwords\n\n**Collection Variables**\n\n| Variable | Type | Description | **User Input** |\n| --- | --- | --- | --- |\n| securePasswordName | string | The Name of the Secure password to return | Mandatory to provide incase of single Secure password migration. |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6652005"
	},
	"item": [
		{
			"name": "Export Single Stored Password By Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var ENTITY=\"StoredPassword\";\r",
							"var XML_NS = \"xmlns:l7=\\\"http://ns.l7tech.com/2010/04/gateway-management\\\"\";\r",
							"var ADDITIONAL_NODE = \"<l7:Password>password</l7:Password>\";\r",
							"\r",
							"var reqNodes = responseBody.substr(responseBody.indexOf('<l7:'+ENTITY+'')).replaceAll(\"\\n\", \"\");\r",
							"\r",
							"if(reqNodes) {\r",
							"    var refinedResponse = reqNodes.replaceAll(\"<l7:Resource>\", \"\").replaceAll(\"</l7:Resource>\", \"\").replaceAll(\"<l7:Item>\", \"\").replaceAll(\"</l7:Item>\", \"\").replaceAll(\"<l7:List>\", \"\").replaceAll(\"</l7:List>\", \"\").replaceAll(\"\\\\n\", \"\").replaceAll(\"\\\\\", \"\").replaceAll(\"  \", \"\");\r",
							"\r",
							"    var finalXmlEntity = refinedResponse.replace(\"</l7:Name>\", \"</l7:Name> \" + ADDITIONAL_NODE +\"\").replace(\"<l7:\"+ENTITY+\"\", \"<l7:\" + ENTITY +\" \" + XML_NS +\"\").replaceAll(\"\\\\\", \"\");\r",
							"\r",
							"    /* Removing version if it exists */\r",
							"    var version = xml2Json(finalXmlEntity)['l7:'+ENTITY+'']['$']['version'];\r",
							"    const version_element = \"version=\" + \"\\\"\" + version + \"\\\"\";\r",
							"    finalXmlEntity = finalXmlEntity.replaceAll(version_element, \"\");\r",
							"\r",
							"    var storedPasswordId = xml2Json(finalXmlEntity)['l7:'+ENTITY+'']['$']['id'];\r",
							"\r",
							"    pm.collectionVariables.set('singleStoredPasswordEntityID', storedPasswordId);\r",
							"    pm.collectionVariables.set(\"singleStoredPasswordXMLBody\", finalXmlEntity);\r",
							"}\r",
							"else {\r",
							"    console.log(\"No Secure password with this Name...\");\r",
							"    pm.collectionVariables.set('singleStoredPasswordEntityID', \"\");\r",
							"    pm.collectionVariables.set(\"singleStoredPasswordXMLBody\", \"\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{gw_src_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{gw_src_admin}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{gw_src_host}}:{{gw_src_port}}/restman/1.0/passwords?name={{securePasswordName}}",
					"protocol": "https",
					"host": [
						"{{gw_src_host}}"
					],
					"port": "{{gw_src_port}}",
					"path": [
						"restman",
						"1.0",
						"passwords"
					],
					"query": [
						{
							"key": "name",
							"value": "{{securePasswordName}}"
						}
					]
				},
				"description": "Returns a single Secure password with the given Name from Source Gateway"
			},
			"response": []
		},
		{
			"name": "Import Single Stored Password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{gw_dst_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{gw_dst_admin}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{singleStoredPasswordXMLBody}}"
				},
				"url": {
					"raw": "https://{{gw_dst_host}}:{{gw_dst_port}}/restman/1.0/passwords/{{singleStoredPasswordEntityID}}",
					"protocol": "https",
					"host": [
						"{{gw_dst_host}}"
					],
					"port": "{{gw_dst_port}}",
					"path": [
						"restman",
						"1.0",
						"passwords",
						"{{singleStoredPasswordEntityID}}"
					]
				},
				"description": "Creates or Updates an existing Secure password in the Target Gateway. If a Secure password with the given Name does not exist one will be created, otherwise the existing one will be updated\n\n**Collection Variables**\n\n| Variable | Type | Description |\n| --- | --- | --- |\n| securePasswordName | string | The Name of the Secure Password to return |"
			},
			"response": []
		},
		{
			"name": "Export All Stored Passwords",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var ENTITY=\"StoredPassword\";\r",
							"var XML_NS = \"xmlns:l7=\\\"http://ns.l7tech.com/2010/04/gateway-management\\\"\";\r",
							"var ADDITIONAL_NODE = \"<l7:Password>password</l7:Password>\";\r",
							"var response = responseBody.substr(responseBody.indexOf('<l7:Item'));\r",
							"var reqNodes = response.substr(response.indexOf('<l7:'+ENTITY+''));\r",
							"var refindedResponse = JSON.stringify(reqNodes).replaceAll(\"<l7:Resource>\", \"\").replaceAll(\"</l7:Resource>\", \"\").replaceAll(\"<l7:Item>\", \"\").replaceAll(\"</l7:Item>\", \"\").replaceAll(\"<l7:List>\", \"\").replaceAll(\"</l7:List>\", \"\").replaceAll(\"\\\\n\", \"\");\r",
							"let listOfEntities = refindedResponse.split(\"</l7:\" + ENTITY + \">\");\r",
							"let entities;\r",
							"for (var e in listOfEntities) {\r",
							"    if (e < listOfEntities.length-1) {\r",
							"        var entity = listOfEntities[e].substr(listOfEntities[e].indexOf(\"<l7:\"+ENTITY)) + \"</l7:\"+ENTITY+\">\";\r",
							"        /* 1. Entity is ready with all necessary input data. */\r",
							"        var finalEntity = JSON.stringify(entity).replace(\"</l7:Name>\", \"</l7:Name> \" + ADDITIONAL_NODE +\"\").replace(\"<l7:\"+ENTITY+\"\", \"<l7:\" + ENTITY +\" \" + XML_NS +\"\").replaceAll(\"\\\\\", \"\");\r",
							"        var finalXmlEntity = finalEntity.substr(1, finalEntity.length-2);\r",
							"        /* 2. Fetching id */\r",
							"        var finalJsonEntity = xml2Json(finalXmlEntity);\r",
							"        var id = finalJsonEntity['l7:'+ENTITY+'']['$']['id']\r",
							"        var version = finalJsonEntity['l7:'+ENTITY+'']['$']['version']\r",
							"        /* 3. Removing version if it exists */\r",
							"        const version_element = \"version=\" + \"\\\"\" + version + \"\\\"\";\r",
							"        finalXmlEntity = finalXmlEntity.replaceAll(version_element, \"\");\r",
							"        /* 4. Preparing entity node array list. */\r",
							"        if(!entities || entities.length == 0) {\r",
							"            entities = [id + \"ID_ENTITY\" + finalXmlEntity + \"END_ENTITY\"];\r",
							"        } else {\r",
							"            entities = entities + [id + \"ID_ENTITY\" + finalXmlEntity + \"END_ENTITY\"];\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"//console.log(entities);\r",
							"\r",
							"/* Setting Response to the postman collection */\r",
							"if (entities && entities.length >= 1) {\r",
							"    if(entities.length > 1) {\r",
							"        entities =  entities.substr(0, entities.length-10);\r",
							"        let lstEntities = entities.split(\"END_ENTITY\");\r",
							"        pm.collectionVariables.set('lstEntitiesArr', lstEntities);\r",
							"    } else {\r",
							"        pm.collectionVariables.set('lstEntitiesArr', entities);\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{gw_src_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{gw_src_admin}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{gw_src_host}}:{{gw_src_port}}/restman/1.0/passwords",
					"protocol": "https",
					"host": [
						"{{gw_src_host}}"
					],
					"port": "{{gw_src_port}}",
					"path": [
						"restman",
						"1.0",
						"passwords"
					]
				},
				"description": "Returns All Stored passwords from Source Gateway"
			},
			"response": []
		},
		{
			"name": "Import All Stored Passwords",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let lstEntities = pm.collectionVariables.get('lstEntitiesArr');\r",
							"\r",
							"if (lstEntities && lstEntities.length > 0) {\r",
							"\r",
							"    /* Reading first entity and remove from the list\r",
							"    DONT FORGET TO SETUP AGAIN TO COLLCTIONS VARIABLES. */\r",
							"    let currentEntity = lstEntities.shift();\r",
							"    //console.log(\"currentEntity  is:   \" + currentEntity);\r",
							"    \r",
							"    let currentEntityArray =  currentEntity.split(\"ID_ENTITY\");\r",
							"    let currentEntityId = currentEntityArray[0];\r",
							"    let currentEntityXML = currentEntityArray[1];\r",
							"    currentEntityXML = currentEntityXML.replaceAll(\"END_ENTITY\", \"\");\r",
							"    \r",
							"    /* Setting id, request body to collectionVariables for furhur processing. */\r",
							"    pm.collectionVariables.set(\"storedPasswordEntityID\", currentEntityId);\r",
							"    pm.collectionVariables.set(\"storedPasswordXMLBody\", currentEntityXML);\r",
							"    \r",
							"    /* Setting modified (One entity removed for processing) entities again to environment */\r",
							"    pm.collectionVariables.set('lstEntitiesArr', lstEntities);\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const lstEntities = pm.collectionVariables.get('lstEntitiesArr');\r",
							"if (lstEntities && lstEntities.length > 0) {\r",
							"    //console.log(\"lstEntities size: \"+lstEntities.length);\r",
							"    postman.setNextRequest(\"Import All Stored Passwords\");\r",
							"} else {\r",
							"    pm.collectionVariables.unset(\"storedPasswordEntityID\");\r",
							"    pm.collectionVariables.unset(\"storedPasswordXMLBody\");\r",
							"    //postman.setNextRequest(null);\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200|201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{gw_dst_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{gw_dst_admin}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{storedPasswordXMLBody}}"
				},
				"url": {
					"raw": "https://{{gw_dst_host}}:{{gw_dst_port}}/restman/1.0/passwords/{{storedPasswordEntityID}}",
					"protocol": "https",
					"host": [
						"{{gw_dst_host}}"
					],
					"port": "{{gw_dst_port}}",
					"path": [
						"restman",
						"1.0",
						"passwords",
						"{{storedPasswordEntityID}}"
					]
				},
				"description": "Creates or Updates an existing Stored password in the Target Gateway. If a Stored password does not exist one will be created, otherwise the existing one will be updated\n\nNote: User doesn't need to pass the \"storedPasswordEntityID\" in the API Path because the ID will automatically be updated in this API path after Get call for Export Stored passwords is executed."
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "7layer",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "securePasswordName",
			"value": "securePasswordName",
			"type": "string"
		},
		{
			"key": "singleStoredPasswordEntityID",
			"value": ""
		},
		{
			"key": "singleStoredPasswordXMLBody",
			"value": ""
		},
		{
			"key": "lstEntitiesArr",
			"value": ""
		}
	]
}