{
	"info": {
		"_postman_id": "15f7d2d6-0392-4beb-b49b-8fe797a3e471",
		"name": "Cassandra Connections Migration",
		"description": "**Pre-requisites**\n\n1.  Make sure to select GATEWAY-ENVIRONMENT-VARIABLES before running any request and fill in the below information\n    \n\n| Variable | Type | Description | **User Input** |\n| --- | --- | --- | --- |\n| gw_src_host | string | Hostname or IP address of the Source Gateway | Mandatory to provide by user |\n| gw_src_user | string | Source Gateway Username | Mandatory to provide by user |\n| gw_src_password | string | Source Gateway Password | Mandatory to provide by user |\n| gw_dst_host | string | Hostname or IP address of the Source Gateway | Mandatory to provide by user |\n| gw_dst_user | string | Destination Gateway Username | Mandatory to provide by user |\n| gw_dst_password | string | Destination Gateway Password | Mandatory to provide by user |\n\n2\\. Make sure to run Stored password migration API's before running cassandra connections migration API's as cassandra connection uses stored password entity\n\n### Cassandra Connection\n\nSince: 1.0.1 Cassandra connections allow the Gateway to query external databases and then use the query results during policy consumption. Cassandra Connection\n\nUser has choice to migrate either single cassandra connection or all cassandra connections exist in the source gateway.\n\nIf User choose to migrate single cassandra connection then it is mandatory to follow below 2 actions\n\n1.  provide the cassandraConnectionName in the variables section of this collection(Click on collection Variables Fill intital and current values of cassandraConnectionName variable)\n2.  While running collection, select only below list of API's\n    \n\nExport Single Cassandra Connection By Name\n\nImport Single Cassandra Connection\n\nIf User choose to migrate All cassandra connections then select only below list of API's. While running the below choosen requests then User doesn't need to provide the cassandraConnectionName.\n\nExport Cassandra Connections\n\nImport Cassandra Connections\n\n**Collection Variables**\n\n| Variable | Type | Description | **User Input** |\n| --- | --- | --- | --- |\n| cassandraConnectionName | string | The Name of the Cassandra connection to return | Mandatory to provide incase of single cassandra connection migration. |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6652005"
	},
	"item": [
		{
			"name": "Export Single Cassandra Connection By Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var ENTITY=\"CassandraConnection\";\r",
							"var XML_NS = \"xmlns:l7=\\\"http://ns.l7tech.com/2010/04/gateway-management\\\"\";\r",
							"var ADDITIONAL_NODE = \"\";\r",
							"\r",
							"var reqNodes = responseBody.substr(responseBody.indexOf('<l7:'+ENTITY+'')).replaceAll(\"\\n\", \"\");\r",
							"\r",
							"if(reqNodes) {\r",
							"\r",
							"    var refinedResponse = reqNodes.replaceAll(\"<l7:Resource>\", \"\").replaceAll(\"</l7:Resource>\", \"\").replaceAll(\"<l7:Item>\", \"\").replaceAll(\"</l7:Item>\", \"\").replaceAll(\"<l7:List>\", \"\").replaceAll(\"</l7:List>\", \"\").replaceAll(\"\\\\n\", \"\").replaceAll(\"\\\\\", \"\").replaceAll(\"  \", \"\");\r",
							"\r",
							"    var finalXmlEntity = refinedResponse.replace(\"</l7:ConnectionProperties>\", ADDITIONAL_NODE +\" </l7:ConnectionProperties>\").replace(\"<l7:\"+ENTITY+\"\", \"<l7:\" + ENTITY +\" \" + XML_NS +\"\").replaceAll(\"\\\\\", \"\");\r",
							"\r",
							"    /* Removing version if it exists */\r",
							"    var version = xml2Json(finalXmlEntity)['l7:'+ENTITY+'']['$']['version'];\r",
							"    const version_element = \"version=\" + \"\\\"\" + version + \"\\\"\";\r",
							"    finalXmlEntity = finalXmlEntity.replaceAll(version_element, \"\");\r",
							"\r",
							"    var cassConnId  =xml2Json(finalXmlEntity)['l7:'+ENTITY+'']['$']['id'];\r",
							"\r",
							"    pm.collectionVariables.set('singleCassConnectionEntityID', cassConnId);\r",
							"    pm.collectionVariables.set(\"singleCassConnectionXMLBody\", finalXmlEntity ); \r",
							"}\r",
							"else {\r",
							"    console.log(\"No Cassandra connection available with this name\");\r",
							"    pm.collectionVariables.set('singleCassConnectionEntityID', \"\");\r",
							"    pm.collectionVariables.set(\"singleCassConnectionXMLBody\", \"\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{gw_src_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{gw_src_admin}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "cassConnName",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://{{gw_src_host}}:{{gw_src_port}}/restman/1.0/cassandraConnections?name={{cassandraConnectionName}}",
					"protocol": "https",
					"host": [
						"{{gw_src_host}}"
					],
					"port": "{{gw_src_port}}",
					"path": [
						"restman",
						"1.0",
						"cassandraConnections"
					],
					"query": [
						{
							"key": "name",
							"value": "{{cassandraConnectionName}}"
						}
					]
				},
				"description": "Returns a single Cassandra connection with the given Name from Source Gateway"
			},
			"response": []
		},
		{
			"name": "Import Single Cassandra Connection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{gw_dst_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{gw_dst_admin}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{singleCassConnectionXMLBody}}"
				},
				"url": {
					"raw": "https://{{gw_dst_host}}:{{gw_dst_port}}/restman/1.0/cassandraConnections/{{singleCassConnectionEntityID}}",
					"protocol": "https",
					"host": [
						"{{gw_dst_host}}"
					],
					"port": "{{gw_dst_port}}",
					"path": [
						"restman",
						"1.0",
						"cassandraConnections",
						"{{singleCassConnectionEntityID}}"
					]
				},
				"description": "Creates or Updates an existing Cassandra connection in the Target Gateway. If a Cassandra connection with the given Name does not exist one will be created, otherwise the existing one will be updated\n\n**Collection Variables**\n\n| Variable | Type | Description |\n| --- | --- | --- |\n| cassandraConnectionName | string | The Name of the Cassandra connection to return |"
			},
			"response": []
		},
		{
			"name": "Export Cassandra Connections",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var ENTITY=\"CassandraConnection\";",
							"var XML_NS = \"xmlns:l7=\\\"http://ns.l7tech.com/2010/04/gateway-management\\\"\";",
							"//var ADDITIONAL_NODE = \"<l7:Property key=\\\"password\\\"><l7:StringValue>password</l7:StringValue></l7:Property>\";",
							"var response = responseBody.substr(responseBody.indexOf('<l7:Item'));",
							"var reqNodes = response.substr(response.indexOf('<l7:'+ENTITY+''));",
							"var refindedResponse = JSON.stringify(reqNodes).replaceAll(\"<l7:Resource>\", \"\").replaceAll(\"</l7:Resource>\", \"\").replaceAll(\"<l7:Item>\", \"\").replaceAll(\"</l7:Item>\", \"\").replaceAll(\"<l7:List>\", \"\").replaceAll(\"</l7:List>\", \"\").replaceAll(\"\\\\n\", \"\");",
							"let listOfEntities = refindedResponse.split(\"</l7:\" + ENTITY + \">\");",
							"let entities;",
							"for (var e in listOfEntities) {",
							"    if (e < listOfEntities.length-1) {",
							"        var entity = listOfEntities[e].substr(listOfEntities[e].indexOf(\"<l7:\"+ENTITY)) + \"</l7:\"+ENTITY+\">\";",
							"        /* 1. Entity is ready with all necessary input data. */",
							"        var finalEntity = JSON.stringify(entity).replace(\"<l7:\"+ENTITY+\"\", \"<l7:\" + ENTITY +\" \" + XML_NS +\"\").replaceAll(\"\\\\\", \"\");",
							"        var finalXmlEntity = finalEntity.substr(1, finalEntity.length-2);",
							"        /* 2. Fetching id */",
							"        var finalJsonEntity = xml2Json(finalXmlEntity);",
							"        var id = finalJsonEntity['l7:'+ENTITY+'']['$']['id']",
							"        var version = finalJsonEntity['l7:'+ENTITY+'']['$']['version']",
							"        /* 3. Removing version if it exists */",
							"        const version_element = \"version=\" + \"\\\"\" + version + \"\\\"\";",
							"        finalXmlEntity = finalXmlEntity.replaceAll(version_element, \"\");",
							"        /* 4. Preparing entity node array list. */",
							"        if(!entities || entities.length == 0) {",
							"            entities = [id + \"ID_ENTITY\" + finalXmlEntity + \"END_ENTITY\"];",
							"        } else {",
							"            entities = entities + [id + \"ID_ENTITY\" + finalXmlEntity + \"END_ENTITY\"];",
							"        }",
							"    }",
							"}",
							"",
							"//console.log(entities);",
							"",
							"/* Setting Response to the postman collection */",
							"if (entities && entities.length >= 1) {",
							"    if(entities.length > 1) {",
							"        entities =  entities.substr(0, entities.length-10);",
							"        let lstEntities = entities.split(\"END_ENTITY\");",
							"        pm.collectionVariables.set('lstEntitiesArr', lstEntities);",
							"    } else {",
							"        pm.collectionVariables.set('lstEntitiesArr', entities);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{gw_src_admin}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{gw_src_password}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{gw_src_host}}:{{gw_src_port}}/restman/1.0/cassandraConnections",
					"protocol": "https",
					"host": [
						"{{gw_src_host}}"
					],
					"port": "{{gw_src_port}}",
					"path": [
						"restman",
						"1.0",
						"cassandraConnections"
					]
				},
				"description": "Returns All Cassandra connections from Source Gateway"
			},
			"response": []
		},
		{
			"name": "Import Cassandra Connections",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let lstEntities = pm.collectionVariables.get('lstEntitiesArr');\r",
							"\r",
							"if (lstEntities.length > 0) {\r",
							"\r",
							"    /* Reading first entity and remove from the list\r",
							"    DONT FORGET TO SETUP AGAIN TO COLLCTIONS VARIABLES. */\r",
							"    let currentEntity = lstEntities.shift();\r",
							"    //console.log(\"currentEntity  is:   \" + currentEntity);\r",
							"    \r",
							"    let currentEntityArray =  currentEntity.split(\"ID_ENTITY\");\r",
							"    let currentEntityId = currentEntityArray[0];\r",
							"    let currentEntityXML = currentEntityArray[1];\r",
							"    currentEntityXML = currentEntityXML.replaceAll(\"END_ENTITY\", \"\");\r",
							"    \r",
							"    /* Setting id, request body to collectionVariables for furhur processing. */\r",
							"    pm.collectionVariables.set(\"cassandraConnectionEntityID\", currentEntityId);\r",
							"    pm.collectionVariables.set(\"cassandraConnectionXMLBody\", currentEntityXML);\r",
							"    \r",
							"    /* Setting modified (One entity removed for processing) entities again to environment */\r",
							"    pm.collectionVariables.set('lstEntitiesArr', lstEntities);\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const lstEntities = pm.collectionVariables.get('lstEntitiesArr');\r",
							"if (lstEntities && lstEntities.length > 0) {\r",
							"    postman.setNextRequest(\"Import Cassandra Connections\");\r",
							"} else {\r",
							"    pm.collectionVariables.unset(\"cassandraConnectionEntityID\");\r",
							"    pm.collectionVariables.unset(\"cassandraConnectionXMLBody\");\r",
							"    //postman.setNextRequest(null);\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200|201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{gw_dst_admin}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{gw_dst_password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{cassandraConnectionXMLBody}}"
				},
				"url": {
					"raw": "https://{{gw_dst_host}}:{{gw_dst_port}}/restman/1.0/cassandraConnections/{{cassandraConnectionEntityID}}",
					"protocol": "https",
					"host": [
						"{{gw_dst_host}}"
					],
					"port": "{{gw_dst_port}}",
					"path": [
						"restman",
						"1.0",
						"cassandraConnections",
						"{{cassandraConnectionEntityID}}"
					]
				},
				"description": "Creates or Updates an existing Cassandra connection in the Target Gateway. If a Cassandra connectiondoes not exist one will be created, otherwise the existing one will be updated\n\nNote: User doesn't need to pass the \"cassandraConnectionEntityID\" in the API Path because the ID will automatically be updated in this API path after Get call for Export Cassandra Connections is executed."
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "password",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "cassandraConnectionName",
			"value": "",
			"type": "string"
		},
		{
			"key": "lstEntitiesArr",
			"value": ""
		},
		{
			"key": "singleCassConnectionEntityID",
			"value": ""
		},
		{
			"key": "singleCassConnectionXMLBody",
			"value": ""
		}
	]
}