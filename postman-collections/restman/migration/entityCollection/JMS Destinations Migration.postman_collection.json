{
	"info": {
		"_postman_id": "646c7324-15b0-4d1b-894a-dfd42493086e",
		"name": "JMS Destinations Migration",
		"description": "**Pre-requisites**\n\n1.  Make sure to select GATEWAY-ENVIRONMENT-VARIABLES before running any request and fill in the below information\n    \n\n| Variable | Type | Description | **User Input** |\n| --- | --- | --- | --- |\n| gw_src_host | string | Hostname or IP address of the Source Gateway | Mandatory to provide by user |\n| gw_src_user | string | Source Gateway Username | Mandatory to provide by user |\n| gw_src_password | string | Source Gateway Password | Mandatory to provide by user |\n| gw_dst_host | string | Hostname or IP address of the Source Gateway | Mandatory to provide by user |\n| gw_dst_user | string | Destination Gateway Username | Mandatory to provide by user |\n| gw_dst_password | string | Destination Gateway Password | Mandatory to provide by user |\n\nNote: All the JMS Destinations are migrated with default password as \"password\". So, After migration, user have to manually change the JMS Destination passwords in the target gateway for each destination.\n\n### JMS Destination\n\nA JMS destination is used to configure a connection to a JMS service. This is used for both inbound and outbound configurations.\n\nUser has choice to migrate either single JMS Destination or all JMS Destinations exist in the source gateway.\n\nIf User choose to migrate single JMS Destination then it is mandatory to follow below 2 actions\n\n1.  provide the jmsDestinationName in the variables section of this collection(Click on collection Variables Fill intital and current values of jmsDestinationName variable)\n2.  While running collection, select only below list of API's\n    \n\nExport Single JMS Destination By Name\n\nImport Single JMS Destination\n\nIf User choose to migrate All JMS Destinations then select only below list of API's. While running the below choosen requests then User doesn't need to provide the jmsDestinationName.\n\nExport JMS Destinations\n\nImport JMS Destinations\n\n**Collection Variables**\n\n| Variable | Type | Description | **User Input** |\n| --- | --- | --- | --- |\n| jmsDestinationName | string | The Name of the JMS Destination to return | Mandatory to provide incase of single JMS destination migration. |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6652005"
	},
	"item": [
		{
			"name": "Export Single JMS Destination By Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var ENTITY=\"JMSDestination\";\r",
							"var XML_NS = \"xmlns:l7=\\\"http://ns.l7tech.com/2010/04/gateway-management\\\"\";\r",
							"var ADDITIONAL_NODE = \"<l7:Property key=\\\"password\\\"><l7:StringValue>password</l7:StringValue></l7:Property>\";\r",
							"\r",
							"var reqNodes = responseBody.substr(responseBody.indexOf('<l7:'+ENTITY+'')).replaceAll(\"\\n\", \"\");\r",
							"\r",
							"if(reqNodes) {\r",
							"    var refinedResponse = reqNodes.replaceAll(\"<l7:Resource>\", \"\").replaceAll(\"</l7:Resource>\", \"\").replaceAll(\"<l7:Item>\", \"\").replaceAll(\"</l7:Item>\", \"\").replaceAll(\"<l7:List>\", \"\").replaceAll(\"</l7:List>\", \"\").replaceAll(\"\\\\n\", \"\").replaceAll(\"\\\\\", \"\").replaceAll(\"  \", \"\");\r",
							"\r",
							"    var finalXmlEntity = refinedResponse.replace(\"</l7:Properties>\", ADDITIONAL_NODE +\" </l7:Properties>\").replace(\"<l7:\"+ENTITY+\"\", \"<l7:\" + ENTITY +\" \" + XML_NS +\"\").replaceAll(\"\\\\\", \"\");\r",
							"\r",
							"    /* Removing version if it exists */\r",
							"    var version = xml2Json(finalXmlEntity)['l7:'+ENTITY+'']['$']['version'];\r",
							"    const version_element = \"version=\" + \"\\\"\" + version + \"\\\"\";\r",
							"    finalXmlEntity = finalXmlEntity.replaceAll(version_element, \"\");\r",
							"\r",
							"    var jmsConnId  =xml2Json(finalXmlEntity)['l7:'+ENTITY+'']['$']['id'];\r",
							"\r",
							"    pm.collectionVariables.set('jmsDestinationId', jmsConnId);\r",
							"    pm.collectionVariables.set(\"jmsDestinationXMLBody\", finalXmlEntity ); \r",
							"}\r",
							"else {\r",
							"    console.log(\"No JMS Destination entity available with this name\");\r",
							"    pm.collectionVariables.set('jmsDestinationId', \"\");\r",
							"    pm.collectionVariables.set(\"jmsDestinationXMLBody\", \"\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{gw_src_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{gw_src_admin}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{gw_src_host}}:{{gw_src_port}}/restman/1.0/jmsDestinations?name={{jmsDestinationName}}",
					"protocol": "https",
					"host": [
						"{{gw_src_host}}"
					],
					"port": "{{gw_src_port}}",
					"path": [
						"restman",
						"1.0",
						"jmsDestinations"
					],
					"query": [
						{
							"key": "name",
							"value": "{{jmsDestinationName}}"
						}
					]
				},
				"description": "Returns a single JMS destination with the given Name from Source Gateway"
			},
			"response": []
		},
		{
			"name": "Import Single JMS Destination",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{gw_dst_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{gw_dst_admin}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{jmsDestinationXMLBody}}"
				},
				"url": {
					"raw": "https://{{gw_dst_host}}:{{gw_dst_port}}/restman/1.0/jmsDestinations/{{jmsDestinationId}}",
					"protocol": "https",
					"host": [
						"{{gw_dst_host}}"
					],
					"port": "{{gw_dst_port}}",
					"path": [
						"restman",
						"1.0",
						"jmsDestinations",
						"{{jmsDestinationId}}"
					]
				},
				"description": "Creates or Updates an existing JMS destination in the Target Gateway. If a JMS destination with the given Name does not exist one will be created, otherwise the existing one will be updated\n\n**Collection Variables**\n\n| Variable | Type | Description |\n| --- | --- | --- |\n| jmsDestinationName | string | The Name of the JMS destination to return |"
			},
			"response": []
		},
		{
			"name": "Export JMS Destinations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var ENTITY=\"JMSDestination\";",
							"var XML_NS = \"xmlns:l7=\\\"http://ns.l7tech.com/2010/04/gateway-management\\\"\";",
							"var ADDITIONAL_NODE = \"<l7:Property key=\\\"password\\\"><l7:StringValue>password</l7:StringValue></l7:Property>\";",
							"var response = responseBody.substr(responseBody.indexOf('<l7:Item'));",
							"var reqNodes = response.substr(response.indexOf('<l7:'+ENTITY+''));",
							"var refindedResponse = JSON.stringify(reqNodes).replaceAll(\"<l7:Resource>\", \"\").replaceAll(\"</l7:Resource>\", \"\").replaceAll(\"<l7:Item>\", \"\").replaceAll(\"</l7:Item>\", \"\").replaceAll(\"<l7:List>\", \"\").replaceAll(\"</l7:List>\", \"\").replaceAll(\"\\\\n\", \"\");",
							"let listOfEntities = refindedResponse.split(\"</l7:\" + ENTITY + \">\");",
							"let entities;",
							"for (var e in listOfEntities) {",
							"    if (e < listOfEntities.length-1) {",
							"        var entity = listOfEntities[e].substr(listOfEntities[e].indexOf(\"<l7:\"+ENTITY)) + \"</l7:\"+ENTITY+\">\";",
							"        /* 1. Entity is ready with all necessary input data. */",
							"        var finalEntity = JSON.stringify(entity).replace(\"</l7:Properties>\", ADDITIONAL_NODE +\" </l7:Properties>\").replace(\"<l7:\"+ENTITY+\"\", \"<l7:\" + ENTITY +\" \" + XML_NS +\"\").replaceAll(\"\\\\\", \"\");",
							"",
							"        //var finalEntity = JSON.stringify(entity).replace(\"<l7:\"+ENTITY+\"\", \"<l7:\" + ENTITY +\" \" + XML_NS +\"\").replaceAll(\"\\\\\", \"\");",
							"        var finalXmlEntity = finalEntity.substr(1, finalEntity.length-2);",
							"        /* 2. Fetching id */",
							"        var finalJsonEntity = xml2Json(finalXmlEntity);",
							"        var id = finalJsonEntity['l7:'+ENTITY+'']['$']['id']",
							"        var version = finalJsonEntity['l7:'+ENTITY+'']['$']['version']",
							"        /* 3. Removing version if it exists */",
							"        const version_element = \"version=\" + \"\\\"\" + version + \"\\\"\";",
							"        finalXmlEntity = finalXmlEntity.replaceAll(version_element, \"\");",
							"",
							"        /* 4. Preparing entity node array list. */",
							"        if(!entities || entities.length == 0) {",
							"            entities = [id + \"ID_ENTITY\" + finalXmlEntity + \"END_ENTITY\"];",
							"        } else {",
							"            entities = entities + [id + \"ID_ENTITY\" + finalXmlEntity + \"END_ENTITY\"];",
							"        }",
							"    }",
							"}",
							"",
							"//console.log(entities);",
							"",
							"/* Setting Response to the postman collection */",
							"if (entities && entities.length >= 1) {",
							"    if(entities.length > 1) {",
							"        entities =  entities.substr(0, entities.length-10);",
							"        let lstEntities = entities.split(\"END_ENTITY\");",
							"        pm.collectionVariables.set('lstEntitiesArr', lstEntities);",
							"    } else {",
							"        pm.collectionVariables.set('lstEntitiesArr', entities);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{gw_src_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{gw_src_admin}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{gw_src_host}}:{{gw_src_port}}/restman/1.0/jmsDestinations",
					"protocol": "https",
					"host": [
						"{{gw_src_host}}"
					],
					"port": "{{gw_src_port}}",
					"path": [
						"restman",
						"1.0",
						"jmsDestinations"
					]
				},
				"description": "Returns All JMS Destinations from Source Gateway"
			},
			"response": []
		},
		{
			"name": "Import JMS Destinations",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let lstEntities = pm.collectionVariables.get('lstEntitiesArr');\r",
							"if (lstEntities && lstEntities.length > 0) {\r",
							"    /* Reading first entity and remove from the list\r",
							"    DONT FORGET TO SETUP AGAIN TO COLLCTIONS VARIABLES. */\r",
							"    let currentEntity = lstEntities.shift();\r",
							"    //console.log(\"currentEntity  is:   \"+currentEntity);\r",
							"    let currentEntityArray =  currentEntity.split(\"ID_ENTITY\");\r",
							"    let currentEntityId = currentEntityArray[0];\r",
							"    let currentEntityXML = currentEntityArray[1];\r",
							"    currentEntityXML = currentEntityXML.replaceAll(\"END_ENTITY\", \"\");\r",
							"    /* Setting id, request body to collectionVariables for furhur processing. */\r",
							"    pm.collectionVariables.set(\"jmsEntityID\", currentEntityId);\r",
							"    pm.collectionVariables.set(\"jmsXMLBody\", currentEntityXML);\r",
							"    /* Setting modified (One entity removed for processing) entities again to environment */\r",
							"    pm.collectionVariables.set('lstEntitiesArr', lstEntities);\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const lstEntities = pm.collectionVariables.get('lstEntitiesArr');\r",
							"if (lstEntities && lstEntities.length > 0){\r",
							"    postman.setNextRequest(\"Import JMS Destinations\");\r",
							"} else {\r",
							"    //postman.setNextRequest(null);\r",
							"    pm.collectionVariables.unset(\"jmsEntityID\");\r",
							"    pm.collectionVariables.unset(\"jmsXMLBody\");\r",
							"}\r",
							"pm.test(\"Status code is 200|201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{gw_dst_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{gw_dst_admin}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{jmsXMLBody}}"
				},
				"url": {
					"raw": "https://{{gw_dst_host}}:{{gw_dst_port}}/restman/1.0/jmsDestinations/{{jmsEntityID}}",
					"protocol": "https",
					"host": [
						"{{gw_dst_host}}"
					],
					"port": "{{gw_dst_port}}",
					"path": [
						"restman",
						"1.0",
						"jmsDestinations",
						"{{jmsEntityID}}"
					]
				},
				"description": "Creates or Updates an existing JMS Destination in the Target Gateway. If a MS Destination does not exist one will be created, otherwise the existing one will be updated\n\nNote: User doesn't need to pass the \"jmsEntityID\" in the API Path because the ID will automatically be updated in this API path after Get call for Export JMS Destinations is executed."
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "7layer",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "jmsDestinationName",
			"value": "jmsDestinationName",
			"type": "string"
		},
		{
			"key": "lstEntitiesArr",
			"value": ""
		}
	]
}