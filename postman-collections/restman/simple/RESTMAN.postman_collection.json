{
	"info": {
		"_postman_id": "342bfb53-1d54-4a48-afd9-c803aef67754",
		"name": "RESTMAN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23091436"
	},
	"item": [
		{
			"name": "1.0",
			"item": [
				{
					"name": "active Connectors",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/activeConnectors/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/activeConnectors/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"activeConnectors",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the active connector to delete."
												}
											]
										},
										"description": "Deletes an existing active connector.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/activeConnectors/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"activeConnectors",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the active connector to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/activeConnectors/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/activeConnectors/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"activeConnectors",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the active connector to return"
												}
											]
										},
										"description": "Returns an active connector with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/activeConnectors/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"activeConnectors",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the active connector to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/activeConnectors/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/activeConnectors/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"activeConnectors",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the active connector to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing active connector. If an active connector with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/activeConnectors/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"activeConnectors",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the active connector to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/activeConnectors",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/activeConnectors?sort=<string>&order=<string>&name=<string>&enabled=<boolean>&type=<string>&hardwiredServiceId=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"activeConnectors"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                              ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "enabled",
											"value": "<boolean>",
											"description": "Enabled filter"
										},
										{
											"key": "type",
											"value": "<string>",
											"description": "Type filter"
										},
										{
											"key": "hardwiredServiceId",
											"value": "<string>",
											"description": "Service ID filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of active connectors. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/activeConnectors?name=MySFTPPollingListener</pre></div>\n <p>Returns active connector with name \"MySFTPPollingListener\".</p>\n <div class=\"code indent\"><pre>/restman/1.0/activeConnectors?type=SFTP&name=MySFTPPollingListener&name=MyOtherSFTPPollingListener</pre></div>\n <p>Returns active connector of SFTP type with name either \"MySFTPPollingListener\" or\n \"MyOtherSFTPPollingListener\"</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/activeConnectors?sort=<string>&order=<string>&name=<string>&enabled=<boolean>&type=<string>&hardwiredServiceId=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"activeConnectors"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "enabled",
													"value": "<boolean>"
												},
												{
													"key": "type",
													"value": "<string>"
												},
												{
													"key": "hardwiredServiceId",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/activeConnectors",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/activeConnectors",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"activeConnectors"
									]
								},
								"description": "Creates a new active connector.\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/activeConnectors",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"activeConnectors"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/activeConnectors/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/activeConnectors/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"activeConnectors",
										"template"
									]
								},
								"description": "Returns a template, which is an example active connector that can be used as a reference for what active\n connector objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/activeConnectors/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"activeConnectors",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "assertion Security Zones",
					"item": [
						{
							"name": "{name}",
							"item": [
								{
									"name": "/1.0/assertionSecurityZones/:name",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/assertionSecurityZones/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"assertionSecurityZones",
												":name"
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": "(Required) Fully qualified name of the assertion"
												}
											]
										},
										"description": "Returns the assertion security zone for the assertion with the given fully qualified name.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/assertionSecurityZones/:name",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"assertionSecurityZones",
														":name"
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": "(Required) Fully qualified name of the assertion"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/assertionSecurityZones/:name",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/assertionSecurityZones/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"assertionSecurityZones",
												":name"
											],
											"variable": [
												{
													"key": "name",
													"value": "<string>",
													"description": "(Required) Fully qualified name of the assertion"
												}
											]
										},
										"description": "Updates an assertion security zone\nUpdate"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/assertionSecurityZones/:name",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"assertionSecurityZones",
														":name"
													],
													"variable": [
														{
															"key": "name",
															"value": "<string>",
															"description": "(Required) Fully qualified name of the assertion"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/assertionSecurityZones",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/assertionSecurityZones?sort=<string>&order=<string>&name=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"assertionSecurityZones"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter. To list all assertions with no security zones applied use the\n                        default ID: 0000000000000000ffffffffffffffff"
										}
									]
								},
								"description": "<p>Returns a list of assertion security zones. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/assertionSecurityZones?name=com.l7tech.external.assertions.jdbcquery.JdbcQueryAssertion</pre></div>\n <p>Returns assertion security zone of the Jdbc Query Assertion. The name of the assertion security zone is the\n fully qualified name of the assertion.</p>\n <div class=\"code indent\"><pre>/restman/1.0/assertionSecurityZones?securityZone.id=0e028eafc5c66c3af755a2e470734948</pre></div>\n <p>Returns assertion security zones that have security zone ID \"0e028eafc5c66c3af755a2e470734948\"</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/assertionSecurityZones?sort=<string>&order=<string>&name=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"assertionSecurityZones"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/assertionSecurityZones/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/assertionSecurityZones/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"assertionSecurityZones",
										"template"
									]
								},
								"description": "Returns a template, which is an example  assertion security zone that can be used as a reference for what\n assertion security zone objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/assertionSecurityZones/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"assertionSecurityZones",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "audit Configuration",
					"item": [
						{
							"name": "default",
							"item": [
								{
									"name": "/1.0/auditConfiguration/default",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/auditConfiguration/default",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"auditConfiguration",
												"default"
											]
										},
										"description": "Returns a audit configuration with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/auditConfiguration/default",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"auditConfiguration",
														"default"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/auditConfiguration/default",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/auditConfiguration/default",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"auditConfiguration",
												"default"
											]
										},
										"description": "Updates an existing AuditConfiguration.\n will be created, otherwise the existing one will be updated.\nUpdate"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/auditConfiguration/default",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"auditConfiguration",
														"default"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/auditConfiguration/default/dependencies",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/auditConfiguration/default/dependencies?level=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"auditConfiguration",
												"default",
												"dependencies"
											],
											"query": [
												{
													"key": "level",
													"value": "-1",
													"description": "How deep to search for the dependencies. 0 for none, 1 for immediate dependencies, -1 for full depth search\n1.0.1"
												}
											]
										},
										"description": "Returns the list of dependencies for this entity.\nGet Dependencies\nGet Dependencies"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/auditConfiguration/default/dependencies?level=-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"auditConfiguration",
														"default",
														"dependencies"
													],
													"query": [
														{
															"key": "level",
															"value": "-1"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/auditConfiguration",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/auditConfiguration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"auditConfiguration"
									]
								},
								"description": "<p>Returns a list of the single audit configuration.<p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/auditConfiguration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"auditConfiguration"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/auditConfiguration/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/auditConfiguration/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"auditConfiguration",
										"template"
									]
								},
								"description": "Returns a template, which is an example AuditConfiguration that can be used as a reference for what AuditConfiguration objects should\n look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/auditConfiguration/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"auditConfiguration",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "bundle",
					"item": [
						{
							"name": "/1.0/bundle",
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "The optional base-64 encoded passphrase to use for the encryption key\n                                            when encrypting secrets.\n1.0.1",
										"key": "L7-key-passphrase",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/1.0/bundle?defaultAction=NewOrExisting&exportGatewayRestManagementService=false&activeConnector=<string>&cassandraConnection=<string>&trustedCertificate=<string>&clusterProperty=<string>&customKeyValue=<string>&emailListener=<string>&encapsulatedAssertion=<string>&firewallRule=<string>&folder=<string>&genericEntity=<string>&httpConfiguration=<string>&identityProvider=<string>&interfaceTag=<string>&jdbcConnection=<string>&jmsDestination=<string>&listenPort=<string>&policy=<string>&policyAlias=<string>&policyBackedService=<string>&privateKey=<string>&service=<string>&serviceAlias=<string>&resource=<string>&revocationCheckingPolicy=<string>&role=<string>&sampleMessage=<string>&scheduledTask=<string>&password=<string>&securityZone=<string>&serverModuleFile=<string>&siteMinderConfiguration=<string>&logSink=<string>&requireActiveConnector=<string>&requireCassandraConnection=<string>&requireTrustedCertificate=<string>&requireClusterProperty=<string>&requireCustomKeyValue=<string>&requireEmailListener=<string>&requireEncapsulatedAssertion=<string>&requireFirewallRule=<string>&requireFolder=<string>&requireGenericEntity=<string>&requireHttpConfiguration=<string>&requireIdentityProvider=<string>&requireInterfaceTag=<string>&requireJdbcConnection=<string>&requireJmsDestination=<string>&requireListenPort=<string>&requirePolicy=<string>&requirePolicyAlias=<string>&requirePolicyBackedService=<string>&requirePrivateKey=<string>&requireService=<string>&requireServiceAlias=<string>&requireResource=<string>&requireRevocationCheckingPolicy=<string>&requireRole=<string>&requireSampleMessage=<string>&requireScheduledTask=<string>&requirePassword=<string>&requireSecurityZone=<string>&requireServerModuleFile=<string>&requireSiteMinderConfiguration=<string>&requireSolutionKit=<string>&all=false&includeDependencies=false&includeSolutionKits=false&encryptSecrets=false&encryptUsingClusterPassphrase=false&encassAsPolicyDependency=false&includeOnlyServicePolicy=false&includeOnlyDependencies=false&includeGatewayConfiguration=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"bundle"
									],
									"query": [
										{
											"key": "defaultAction",
											"value": "NewOrExisting",
											"description": "Default bundling action. By default this is NewOrExisting"
										},
										{
											"key": "exportGatewayRestManagementService",
											"value": "false",
											"description": "If true the gateway management service will be exported too. False by\n                                            default."
										},
										{
											"key": "activeConnector",
											"value": "<string>",
											"description": "Active Connectors to export\n1.0.2"
										},
										{
											"key": "cassandraConnection",
											"value": "<string>",
											"description": "Cassandra Connections to export\n1.0.2"
										},
										{
											"key": "trustedCertificate",
											"value": "<string>",
											"description": "Trusted Certificates to export\n1.0.2"
										},
										{
											"key": "clusterProperty",
											"value": "<string>",
											"description": "Cluster properties to export\n1.0.2"
										},
										{
											"key": "customKeyValue",
											"value": "<string>",
											"description": "Custom Key Values to export\n1.0.2"
										},
										{
											"key": "emailListener",
											"value": "<string>",
											"description": "Email listeners to export\n1.0.2"
										},
										{
											"key": "encapsulatedAssertion",
											"value": "<string>",
											"description": "Encapsulated Assertions to export\n1.0.2"
										},
										{
											"key": "firewallRule",
											"value": "<string>",
											"description": "Firewall rules to export\n1.0.2"
										},
										{
											"key": "folder",
											"value": "<string>",
											"description": "Folders to export"
										},
										{
											"key": "genericEntity",
											"value": "<string>",
											"description": "Generic entities to export\n1.0.2"
										},
										{
											"key": "httpConfiguration",
											"value": "<string>",
											"description": "Http Configurations to export\n1.0.2"
										},
										{
											"key": "identityProvider",
											"value": "<string>",
											"description": "Identity providers to export\n1.0.2"
										},
										{
											"key": "interfaceTag",
											"value": "<string>",
											"description": "Interface Tags to export\n1.0.2"
										},
										{
											"key": "jdbcConnection",
											"value": "<string>",
											"description": "JDBC Connections to export\n1.0.2"
										},
										{
											"key": "jmsDestination",
											"value": "<string>",
											"description": "JMS Destinations to Export\n1.0.2"
										},
										{
											"key": "listenPort",
											"value": "<string>",
											"description": "Listen Ports to export\n1.0.2"
										},
										{
											"key": "policy",
											"value": "<string>",
											"description": "Policies to export"
										},
										{
											"key": "policyAlias",
											"value": "<string>",
											"description": "Policy Aliases to export\n1.0.2"
										},
										{
											"key": "policyBackedService",
											"value": "<string>",
											"description": "Policy Backed Services to export\n1.0.2"
										},
										{
											"key": "privateKey",
											"value": "<string>",
											"description": "Private Keys to export\n1.0.2"
										},
										{
											"key": "service",
											"value": "<string>",
											"description": "Services to export"
										},
										{
											"key": "serviceAlias",
											"value": "<string>",
											"description": "Service Aliases to export\n1.0.2"
										},
										{
											"key": "resource",
											"value": "<string>",
											"description": "Resources to export\n1.0.2"
										},
										{
											"key": "revocationCheckingPolicy",
											"value": "<string>",
											"description": "Revocation Checking Policies to export\n1.0.2"
										},
										{
											"key": "role",
											"value": "<string>",
											"description": "Roles to export\n1.0.2"
										},
										{
											"key": "sampleMessage",
											"value": "<string>",
											"description": "Sample Messages to export\n1.0.2"
										},
										{
											"key": "scheduledTask",
											"value": "<string>",
											"description": "Scheduled Tasks to export\n1.0.2"
										},
										{
											"key": "password",
											"value": "<string>",
											"description": "Passwords to export\n1.0.2"
										},
										{
											"key": "securityZone",
											"value": "<string>",
											"description": "Security Zones to export\n1.0.2"
										},
										{
											"key": "serverModuleFile",
											"value": "<string>",
											"description": "Server Modules Files to export\n1.0.2"
										},
										{
											"key": "siteMinderConfiguration",
											"value": "<string>",
											"description": "Siteminder Configurations to export\n1.0.2"
										},
										{
											"key": "logSink",
											"value": "<string>",
											"description": "Log Sinks to export\n1.0.4"
										},
										{
											"key": "requireActiveConnector",
											"value": "<string>",
											"description": "Marks these Active Connectors as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireCassandraConnection",
											"value": "<string>",
											"description": "Marks these Cassandra Connections as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireTrustedCertificate",
											"value": "<string>",
											"description": "Marks these Trusted Certificates as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireClusterProperty",
											"value": "<string>",
											"description": "Marks these Cluster properties as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireCustomKeyValue",
											"value": "<string>",
											"description": "Marks these Custom Key Values as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireEmailListener",
											"value": "<string>",
											"description": "Marks these Email listeners as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireEncapsulatedAssertion",
											"value": "<string>",
											"description": "Marks these Encapsulated Assertions as required in the bundle (does\n                                            not export their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireFirewallRule",
											"value": "<string>",
											"description": "Marks these Firewall rules as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireFolder",
											"value": "<string>",
											"description": "Marks these Folders as required in the bundle (does not export their\n                                            dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireGenericEntity",
											"value": "<string>",
											"description": "Marks these Generic entities as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireHttpConfiguration",
											"value": "<string>",
											"description": "Marks these Http Configurations as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireIdentityProvider",
											"value": "<string>",
											"description": "Marks these Identity providers as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireInterfaceTag",
											"value": "<string>",
											"description": "Marks these Interface Tags as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireJdbcConnection",
											"value": "<string>",
											"description": "Marks these JDBC Connections as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireJmsDestination",
											"value": "<string>",
											"description": "Marks these JMS Destinations as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireListenPort",
											"value": "<string>",
											"description": "Marks these Listen Ports as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requirePolicy",
											"value": "<string>",
											"description": "Marks these Policies as required in the bundle (does not export their\n                                            dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requirePolicyAlias",
											"value": "<string>",
											"description": "Marks these Policy Aliases as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requirePolicyBackedService",
											"value": "<string>",
											"description": "Marks these Policy Backed Services as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requirePrivateKey",
											"value": "<string>",
											"description": "Marks these Private Keys as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireService",
											"value": "<string>",
											"description": "Marks these Services as required in the bundle (does not export their\n                                            dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireServiceAlias",
											"value": "<string>",
											"description": "Marks these Service Aliases as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireResource",
											"value": "<string>",
											"description": "Marks these Resources as required in the bundle (does not export their\n                                            dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireRevocationCheckingPolicy",
											"value": "<string>",
											"description": "Marks these Revocation Checking Policies as required in the bundle\n                                            (does not export their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireRole",
											"value": "<string>",
											"description": "Marks these Roles as required in the bundle (does not export their\n                                            dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireSampleMessage",
											"value": "<string>",
											"description": "Marks these Sample Messages as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireScheduledTask",
											"value": "<string>",
											"description": "Marks these Scheduled Tasks as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requirePassword",
											"value": "<string>",
											"description": "Marks these Passwords as required in the bundle (does not export their\n                                            dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireSecurityZone",
											"value": "<string>",
											"description": "Marks these Security Zones as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireServerModuleFile",
											"value": "<string>",
											"description": "Marks these Server Modules Files as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireSiteMinderConfiguration",
											"value": "<string>",
											"description": "Marks these Siteminder Configurations as required in the bundle (does\n                                            not export their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "requireSolutionKit",
											"value": "<string>",
											"description": "Marks these Solution Kits as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\n1.0.2"
										},
										{
											"key": "all",
											"value": "false",
											"description": "True to export the full gateway. False by default\n1.0.1"
										},
										{
											"key": "includeDependencies",
											"value": "false",
											"description": "True to export with dependencies. False by default\n1.0.1"
										},
										{
											"key": "includeSolutionKits",
											"value": "false",
											"description": "True to export with Solution Kit entities (i.e. Solution Kit entities\n                                            them self and not the entities owned by Solution Kits). False by default.\n                                            Valid only on full Gateway export (i.e. if fullGateway is True)\n1.0.2"
										},
										{
											"key": "encryptSecrets",
											"value": "false",
											"description": "True to export with encrypted secrets. False by default.\n1.0.1"
										},
										{
											"key": "encryptUsingClusterPassphrase",
											"value": "false",
											"description": "True to use the cluster passphrase if encrypting secrets. False by\n                                            default.\n1.0.1"
										},
										{
											"key": "encassAsPolicyDependency",
											"value": "false",
											"description": "True to include the encapsulated assertion entities when exporting policies.\n1.0.3"
										},
										{
											"key": "includeOnlyServicePolicy",
											"value": "false",
											"description": "True to export only service policy. False by default.\n1.0.3"
										},
										{
											"key": "includeOnlyDependencies",
											"value": "false",
											"description": "True to export only dependencies. False by default.\n1.0.3"
										},
										{
											"key": "includeGatewayConfiguration",
											"value": "false",
											"description": "True to include gateway configurations. Includes audit configuration. False by default.\n1.0.4"
										}
									]
								},
								"description": "Returns the bundle for the given resources. This API call is capable of returning a bundle created from multiple\n resources.\nExport Bundle"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "The optional base-64 encoded passphrase to use for the encryption key\n                                            when encrypting secrets.\n1.0.1",
												"key": "L7-key-passphrase",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/1.0/bundle?defaultAction=NewOrExisting&exportGatewayRestManagementService=false&activeConnector=<string>&cassandraConnection=<string>&trustedCertificate=<string>&clusterProperty=<string>&customKeyValue=<string>&emailListener=<string>&encapsulatedAssertion=<string>&firewallRule=<string>&folder=<string>&genericEntity=<string>&httpConfiguration=<string>&identityProvider=<string>&interfaceTag=<string>&jdbcConnection=<string>&jmsDestination=<string>&listenPort=<string>&policy=<string>&policyAlias=<string>&policyBackedService=<string>&privateKey=<string>&service=<string>&serviceAlias=<string>&resource=<string>&revocationCheckingPolicy=<string>&role=<string>&sampleMessage=<string>&scheduledTask=<string>&password=<string>&securityZone=<string>&serverModuleFile=<string>&siteMinderConfiguration=<string>&logSink=<string>&requireActiveConnector=<string>&requireCassandraConnection=<string>&requireTrustedCertificate=<string>&requireClusterProperty=<string>&requireCustomKeyValue=<string>&requireEmailListener=<string>&requireEncapsulatedAssertion=<string>&requireFirewallRule=<string>&requireFolder=<string>&requireGenericEntity=<string>&requireHttpConfiguration=<string>&requireIdentityProvider=<string>&requireInterfaceTag=<string>&requireJdbcConnection=<string>&requireJmsDestination=<string>&requireListenPort=<string>&requirePolicy=<string>&requirePolicyAlias=<string>&requirePolicyBackedService=<string>&requirePrivateKey=<string>&requireService=<string>&requireServiceAlias=<string>&requireResource=<string>&requireRevocationCheckingPolicy=<string>&requireRole=<string>&requireSampleMessage=<string>&requireScheduledTask=<string>&requirePassword=<string>&requireSecurityZone=<string>&requireServerModuleFile=<string>&requireSiteMinderConfiguration=<string>&requireSolutionKit=<string>&all=false&includeDependencies=false&includeSolutionKits=false&encryptSecrets=false&encryptUsingClusterPassphrase=false&encassAsPolicyDependency=false&includeOnlyServicePolicy=false&includeOnlyDependencies=false&includeGatewayConfiguration=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"bundle"
											],
											"query": [
												{
													"key": "defaultAction",
													"value": "NewOrExisting"
												},
												{
													"key": "exportGatewayRestManagementService",
													"value": "false"
												},
												{
													"key": "activeConnector",
													"value": "<string>"
												},
												{
													"key": "cassandraConnection",
													"value": "<string>"
												},
												{
													"key": "trustedCertificate",
													"value": "<string>"
												},
												{
													"key": "clusterProperty",
													"value": "<string>"
												},
												{
													"key": "customKeyValue",
													"value": "<string>"
												},
												{
													"key": "emailListener",
													"value": "<string>"
												},
												{
													"key": "encapsulatedAssertion",
													"value": "<string>"
												},
												{
													"key": "firewallRule",
													"value": "<string>"
												},
												{
													"key": "folder",
													"value": "<string>"
												},
												{
													"key": "genericEntity",
													"value": "<string>"
												},
												{
													"key": "httpConfiguration",
													"value": "<string>"
												},
												{
													"key": "identityProvider",
													"value": "<string>"
												},
												{
													"key": "interfaceTag",
													"value": "<string>"
												},
												{
													"key": "jdbcConnection",
													"value": "<string>"
												},
												{
													"key": "jmsDestination",
													"value": "<string>"
												},
												{
													"key": "listenPort",
													"value": "<string>"
												},
												{
													"key": "policy",
													"value": "<string>"
												},
												{
													"key": "policyAlias",
													"value": "<string>"
												},
												{
													"key": "policyBackedService",
													"value": "<string>"
												},
												{
													"key": "privateKey",
													"value": "<string>"
												},
												{
													"key": "service",
													"value": "<string>"
												},
												{
													"key": "serviceAlias",
													"value": "<string>"
												},
												{
													"key": "resource",
													"value": "<string>"
												},
												{
													"key": "revocationCheckingPolicy",
													"value": "<string>"
												},
												{
													"key": "role",
													"value": "<string>"
												},
												{
													"key": "sampleMessage",
													"value": "<string>"
												},
												{
													"key": "scheduledTask",
													"value": "<string>"
												},
												{
													"key": "password",
													"value": "<string>"
												},
												{
													"key": "securityZone",
													"value": "<string>"
												},
												{
													"key": "serverModuleFile",
													"value": "<string>"
												},
												{
													"key": "siteMinderConfiguration",
													"value": "<string>"
												},
												{
													"key": "logSink",
													"value": "<string>"
												},
												{
													"key": "requireActiveConnector",
													"value": "<string>"
												},
												{
													"key": "requireCassandraConnection",
													"value": "<string>"
												},
												{
													"key": "requireTrustedCertificate",
													"value": "<string>"
												},
												{
													"key": "requireClusterProperty",
													"value": "<string>"
												},
												{
													"key": "requireCustomKeyValue",
													"value": "<string>"
												},
												{
													"key": "requireEmailListener",
													"value": "<string>"
												},
												{
													"key": "requireEncapsulatedAssertion",
													"value": "<string>"
												},
												{
													"key": "requireFirewallRule",
													"value": "<string>"
												},
												{
													"key": "requireFolder",
													"value": "<string>"
												},
												{
													"key": "requireGenericEntity",
													"value": "<string>"
												},
												{
													"key": "requireHttpConfiguration",
													"value": "<string>"
												},
												{
													"key": "requireIdentityProvider",
													"value": "<string>"
												},
												{
													"key": "requireInterfaceTag",
													"value": "<string>"
												},
												{
													"key": "requireJdbcConnection",
													"value": "<string>"
												},
												{
													"key": "requireJmsDestination",
													"value": "<string>"
												},
												{
													"key": "requireListenPort",
													"value": "<string>"
												},
												{
													"key": "requirePolicy",
													"value": "<string>"
												},
												{
													"key": "requirePolicyAlias",
													"value": "<string>"
												},
												{
													"key": "requirePolicyBackedService",
													"value": "<string>"
												},
												{
													"key": "requirePrivateKey",
													"value": "<string>"
												},
												{
													"key": "requireService",
													"value": "<string>"
												},
												{
													"key": "requireServiceAlias",
													"value": "<string>"
												},
												{
													"key": "requireResource",
													"value": "<string>"
												},
												{
													"key": "requireRevocationCheckingPolicy",
													"value": "<string>"
												},
												{
													"key": "requireRole",
													"value": "<string>"
												},
												{
													"key": "requireSampleMessage",
													"value": "<string>"
												},
												{
													"key": "requireScheduledTask",
													"value": "<string>"
												},
												{
													"key": "requirePassword",
													"value": "<string>"
												},
												{
													"key": "requireSecurityZone",
													"value": "<string>"
												},
												{
													"key": "requireServerModuleFile",
													"value": "<string>"
												},
												{
													"key": "requireSiteMinderConfiguration",
													"value": "<string>"
												},
												{
													"key": "requireSolutionKit",
													"value": "<string>"
												},
												{
													"key": "all",
													"value": "false"
												},
												{
													"key": "includeDependencies",
													"value": "false"
												},
												{
													"key": "includeSolutionKits",
													"value": "false"
												},
												{
													"key": "encryptSecrets",
													"value": "false"
												},
												{
													"key": "encryptUsingClusterPassphrase",
													"value": "false"
												},
												{
													"key": "encassAsPolicyDependency",
													"value": "false"
												},
												{
													"key": "includeOnlyServicePolicy",
													"value": "false"
												},
												{
													"key": "includeOnlyDependencies",
													"value": "false"
												},
												{
													"key": "includeGatewayConfiguration",
													"value": "false"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/bundle",
							"request": {
								"method": "PUT",
								"header": [
									{
										"description": "The optional base-64 encoded passphrase to use for the encryption key when\n                             encrypting passwords.\n1.0.1",
										"key": "L7-key-passphrase",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/1.0/bundle?test=false&activate=true&versionComment=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"bundle"
									],
									"query": [
										{
											"key": "test",
											"value": "false",
											"description": "If true the bundle import will be tested no changes will be made to the gateway"
										},
										{
											"key": "activate",
											"value": "true",
											"description": "False to not activate the updated services and policies."
										},
										{
											"key": "versionComment",
											"value": "<string>",
											"description": "The comment to set for updated/created services and policies"
										}
									]
								},
								"description": "This will import a bundle.\nImport Bundle"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "The optional base-64 encoded passphrase to use for the encryption key when\n                             encrypting passwords.\n1.0.1",
												"key": "L7-key-passphrase",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/1.0/bundle?test=false&activate=true&versionComment=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"bundle"
											],
											"query": [
												{
													"key": "test",
													"value": "false"
												},
												{
													"key": "activate",
													"value": "true"
												},
												{
													"key": "versionComment",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/bundle/batch",
							"request": {
								"method": "PUT",
								"header": [
									{
										"description": "The optional base-64 encoded passphrase to use for the encryption key when\n                             encrypting passwords.\n1.0.1",
										"key": "L7-key-passphrase",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/1.0/bundle/batch?test=false&activate=true&versionComment=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"bundle",
										"batch"
									],
									"query": [
										{
											"key": "test",
											"value": "false",
											"description": "If true the bundles import will be tested no changes will be made to the gateway"
										},
										{
											"key": "activate",
											"value": "true",
											"description": "False to not activate the updated services and policies."
										},
										{
											"key": "versionComment",
											"value": "<string>",
											"description": "The comment to set for updated/created services and policies"
										}
									]
								},
								"description": "This will import a batch of bundles.\nImport Bundles\n1.0.4"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "The optional base-64 encoded passphrase to use for the encryption key when\n                             encrypting passwords.\n1.0.1",
												"key": "L7-key-passphrase",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/1.0/bundle/batch?test=false&activate=true&versionComment=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"bundle",
												"batch"
											],
											"query": [
												{
													"key": "test",
													"value": "false"
												},
												{
													"key": "activate",
													"value": "true"
												},
												{
													"key": "versionComment",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/bundle/:resourceType/:id",
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "The optional base-64 encoded passphrase to use for the encryption key\n                                           when encrypting secrets.\n1.0.1",
										"key": "L7-key-passphrase",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/1.0/bundle/:resourceType/:id?defaultAction=NewOrExisting&defaultMapBy=id&includeRequestFolder=false&exportGatewayRestManagementService=false&includeDependencies=false&encryptSecrets=false&encryptUsingClusterPassphrase=false&includeOnlyServicePolicy=false&includeOnlyDependencies=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"bundle",
										":resourceType",
										":id"
									],
									"query": [
										{
											"key": "defaultAction",
											"value": "NewOrExisting",
											"description": "Default bundling action. By default this is NewOrExisting"
										},
										{
											"key": "defaultMapBy",
											"value": "id",
											"description": "Default map by action."
										},
										{
											"key": "includeRequestFolder",
											"value": "false",
											"description": "For a folder export, specifies whether to include the folder in the\n                                           bundle or just its contents."
										},
										{
											"key": "exportGatewayRestManagementService",
											"value": "false",
											"description": "If true the gateway management service will be exported too. False by\n                                           default."
										},
										{
											"key": "includeDependencies",
											"value": "false",
											"description": "True to export with dependencies. False by default\n1.0.1"
										},
										{
											"key": "encryptSecrets",
											"value": "false",
											"description": "True to export with encrypted secrets. False by default.\n1.0.1"
										},
										{
											"key": "encryptUsingClusterPassphrase",
											"value": "false",
											"description": "True to use the cluster passphrase if encrypting secrets. False by\n                                           default\n1.0.1"
										},
										{
											"key": "includeOnlyServicePolicy",
											"value": "false",
											"description": "True to export only service policy. False by default.\n1.0.3"
										},
										{
											"key": "includeOnlyDependencies",
											"value": "false",
											"description": "True to export only dependencies. False by default.\n1.0.3"
										}
									],
									"variable": [
										{
											"key": "resourceType",
											"value": "<string>",
											"description": "(Required) Resource type. Either folder, service or policy"
										},
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) ID of the resource to bundle"
										}
									]
								},
								"description": "Returns the bundle for the given resource type. The resource type is either a policy, service, or folder\nExport Folder Service Or Policy Bundle\nFolder, Service or Policy Export"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "The optional base-64 encoded passphrase to use for the encryption key\n                                           when encrypting secrets.\n1.0.1",
												"key": "L7-key-passphrase",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/1.0/bundle/:resourceType/:id?defaultAction=NewOrExisting&defaultMapBy=id&includeRequestFolder=false&exportGatewayRestManagementService=false&includeDependencies=false&encryptSecrets=false&encryptUsingClusterPassphrase=false&includeOnlyServicePolicy=false&includeOnlyDependencies=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"bundle",
												":resourceType",
												":id"
											],
											"query": [
												{
													"key": "defaultAction",
													"value": "NewOrExisting"
												},
												{
													"key": "defaultMapBy",
													"value": "id"
												},
												{
													"key": "includeRequestFolder",
													"value": "false"
												},
												{
													"key": "exportGatewayRestManagementService",
													"value": "false"
												},
												{
													"key": "includeDependencies",
													"value": "false"
												},
												{
													"key": "encryptSecrets",
													"value": "false"
												},
												{
													"key": "encryptUsingClusterPassphrase",
													"value": "false"
												},
												{
													"key": "includeOnlyServicePolicy",
													"value": "false"
												},
												{
													"key": "includeOnlyDependencies",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "resourceType",
													"value": "<string>",
													"description": "(Required) Resource type. Either folder, service or policy"
												},
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the resource to bundle"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "cassandra Connections",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/cassandraConnections/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/cassandraConnections/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"cassandraConnections",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the Cassandra connection to delete."
												}
											]
										},
										"description": "Deletes an existing Cassandra connection.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/cassandraConnections/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"cassandraConnections",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the Cassandra connection to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/cassandraConnections/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/cassandraConnections/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"cassandraConnections",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the Cassandra connection to return"
												}
											]
										},
										"description": "Returns a Cassandra connection with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/cassandraConnections/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"cassandraConnections",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the Cassandra connection to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/cassandraConnections/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/cassandraConnections/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"cassandraConnections",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the Cassandra connection to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing Cassandra connection. If a Cassandra connection with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/cassandraConnections/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"cassandraConnections",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the Cassandra connection to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/cassandraConnections",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/cassandraConnections?sort=<string>&order=<string>&name=<string>&keyspace=<string>&contactPoint=<string>&port=<string>&username=<string>&compression=<string>&ssl=<boolean>&enabled=<boolean>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"cassandraConnections"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "keyspace",
											"value": "<string>",
											"description": "Keyspace filter"
										},
										{
											"key": "contactPoint",
											"value": "<string>",
											"description": "Contact point filter"
										},
										{
											"key": "port",
											"value": "<string>",
											"description": "Port filter"
										},
										{
											"key": "username",
											"value": "<string>",
											"description": "User name filter"
										},
										{
											"key": "compression",
											"value": "<string>",
											"description": "Compression filter"
										},
										{
											"key": "ssl",
											"value": "<boolean>",
											"description": "SSL filter"
										},
										{
											"key": "enabled",
											"value": "<boolean>",
											"description": "Enabled filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of Cassandra connections. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/cassandraConnections?name=MyCassandraConnection</pre></div>\n <p>Returns Cassandra connection with name \"MyCassandraConnection\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/cassandraConnections?sort=<string>&order=<string>&name=<string>&keyspace=<string>&contactPoint=<string>&port=<string>&username=<string>&compression=<string>&ssl=<boolean>&enabled=<boolean>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"cassandraConnections"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "keyspace",
													"value": "<string>"
												},
												{
													"key": "contactPoint",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "username",
													"value": "<string>"
												},
												{
													"key": "compression",
													"value": "<string>"
												},
												{
													"key": "ssl",
													"value": "<boolean>"
												},
												{
													"key": "enabled",
													"value": "<boolean>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/cassandraConnections",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/cassandraConnections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"cassandraConnections"
									]
								},
								"description": "Creates a new Cassandra connection\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/cassandraConnections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"cassandraConnections"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/cassandraConnections/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/cassandraConnections/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"cassandraConnections",
										"template"
									]
								},
								"description": "Returns a template, which is an example Cassandra connection that can be used as a reference for what Cassandra connection\n objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/cassandraConnections/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"cassandraConnections",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "cluster Properties",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/clusterProperties/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/clusterProperties/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"clusterProperties",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the cluster property to delete."
												}
											]
										},
										"description": "Deletes an existing cluster property.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/clusterProperties/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"clusterProperties",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the cluster property to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/clusterProperties/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/clusterProperties/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"clusterProperties",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the cluster property to return"
												}
											]
										},
										"description": "Returns a cluster property with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/clusterProperties/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"clusterProperties",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the cluster property to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/clusterProperties/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/clusterProperties/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"clusterProperties",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the cluster property to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing cluster property. If a cluster property with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/clusterProperties/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"clusterProperties",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the cluster property to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/clusterProperties",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/clusterProperties?sort=<string>&order=<string>&name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"clusterProperties"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n              ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										}
									]
								},
								"description": "<p>Returns a list of cluster properties. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/clusterProperties?name=MyProperty</pre></div>\n <p>Returns cluster property with name \"MyProperty\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/clusterProperties?sort=<string>&order=<string>&name=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"clusterProperties"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/clusterProperties",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/clusterProperties",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"clusterProperties"
									]
								},
								"description": "Creates a new cluster property.\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/clusterProperties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"clusterProperties"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/clusterProperties/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/clusterProperties/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"clusterProperties",
										"template"
									]
								},
								"description": "Returns a template, which is an example cluster property that can be used as a reference for what cluster\n property objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/clusterProperties/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"clusterProperties",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "custom Key Values",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/customKeyValues/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/customKeyValues/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"customKeyValues",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the custom key value to delete."
												}
											]
										},
										"description": "Deletes an existing custom key value.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/customKeyValues/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"customKeyValues",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the custom key value to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/customKeyValues/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/customKeyValues/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"customKeyValues",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the custom key value to return"
												}
											]
										},
										"description": "Returns a custom key value with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/customKeyValues/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"customKeyValues",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the custom key value to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/customKeyValues/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/customKeyValues/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"customKeyValues",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the custom key value to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing custom key value. If a custom key value with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/customKeyValues/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"customKeyValues",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the custom key value to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/customKeyValues",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/customKeyValues?sort=<string>&order=<string>&key=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"customKeyValues"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by."
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n              ascending if not specified"
										},
										{
											"key": "key",
											"value": "<string>",
											"description": "Key filter"
										}
									]
								},
								"description": "<p>Returns a list of custom key values. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/customKeyValues?key=MyKey</pre></div>\n <p>Returns custom key value with key \"MyKey\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/customKeyValues?sort=<string>&order=<string>&key=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"customKeyValues"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "key",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/customKeyValues",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/customKeyValues",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"customKeyValues"
									]
								},
								"description": "Creates a new custom key value.\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/customKeyValues",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"customKeyValues"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/customKeyValues/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/customKeyValues/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"customKeyValues",
										"template"
									]
								},
								"description": "Returns a template, which is an example custom key value that can be used as a reference for what custom key\n value objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/customKeyValues/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"customKeyValues",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "email Listeners",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/emailListeners/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/emailListeners/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"emailListeners",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the email listener to delete."
												}
											]
										},
										"description": "Deletes an existing email listener.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/emailListeners/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"emailListeners",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the email listener to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/emailListeners/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/emailListeners/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"emailListeners",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the email listener to return"
												}
											]
										},
										"description": "Returns an email listener with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/emailListeners/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"emailListeners",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the email listener to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/emailListeners/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/emailListeners/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"emailListeners",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the email listener to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing email listener. If an email listener with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/emailListeners/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"emailListeners",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the email listener to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/emailListeners",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/emailListeners?sort=<string>&order=<string>&name=<string>&active=<boolean>&serverType=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"emailListeners"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "active",
											"value": "<boolean>",
											"description": "Active filter"
										},
										{
											"key": "serverType",
											"value": "<string>",
											"description": "Server type filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of email listeners. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/emailListeners?name=MyEmailListener</pre></div>\n <p>Returns email listener with name \"MyEmailListener\".</p>\n <div class=\"code indent\"><pre>/restman/1.0/emailListeners?serverTypes=IMAP</pre></div>\n <p>Returns email listeners of IMAP type</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/emailListeners?sort=<string>&order=<string>&name=<string>&active=<boolean>&serverType=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"emailListeners"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "active",
													"value": "<boolean>"
												},
												{
													"key": "serverType",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/emailListeners",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/emailListeners",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"emailListeners"
									]
								},
								"description": "Creates a new email listener\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/emailListeners",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"emailListeners"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/emailListeners/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/emailListeners/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"emailListeners",
										"template"
									]
								},
								"description": "Returns a template, which is an example email listener that can be used as a reference for what email listener\n objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/emailListeners/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"emailListeners",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "encapsulated Assertions",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/encapsulatedAssertions/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/encapsulatedAssertions/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"encapsulatedAssertions",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the encapsulated assertion to delete."
												}
											]
										},
										"description": "Deletes an existing encapsulated assertion.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/encapsulatedAssertions/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"encapsulatedAssertions",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the encapsulated assertion to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/encapsulatedAssertions/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/encapsulatedAssertions/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"encapsulatedAssertions",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the encapsulated assertion to return"
												}
											]
										},
										"description": "Returns an encapsulated assertion with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/encapsulatedAssertions/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"encapsulatedAssertions",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the encapsulated assertion to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/encapsulatedAssertions/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/encapsulatedAssertions/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"encapsulatedAssertions",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the encapsulated assertion to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing encapsulated assertion. If an encapsulated assertion with the given ID does not\n exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/encapsulatedAssertions/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"encapsulatedAssertions",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the encapsulated assertion to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/encapsulatedAssertions/:id/dependencies",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/encapsulatedAssertions/:id/dependencies?level=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"encapsulatedAssertions",
												":id",
												"dependencies"
											],
											"query": [
												{
													"key": "level",
													"value": "-1",
													"description": "How deep to search for the dependencies. 0 for none, 1 for immediate dependencies, -1 for full depth search\n1.0.1"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										},
										"description": "Returns the list of dependencies for this entity.\nGet Dependencies\nGet Dependencies"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/encapsulatedAssertions/:id/dependencies?level=-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"encapsulatedAssertions",
														":id",
														"dependencies"
													],
													"query": [
														{
															"key": "level",
															"value": "-1"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/encapsulatedAssertions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/encapsulatedAssertions?sort=<string>&order=<string>&name=<string>&policy.id=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"encapsulatedAssertions"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by."
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "policy.id",
											"value": "<string>",
											"description": "Policy id filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of encapsulated assertions. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/activeConnectors?name=MyEncass</pre></div>\n <p>Returns encapsulated assertion with name \"MyEncass\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/encapsulatedAssertions?sort=<string>&order=<string>&name=<string>&policy.id=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"encapsulatedAssertions"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "policy.id",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/encapsulatedAssertions",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/encapsulatedAssertions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"encapsulatedAssertions"
									]
								},
								"description": "Creates a new encapsulated assertion\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/encapsulatedAssertions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"encapsulatedAssertions"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/encapsulatedAssertions/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/encapsulatedAssertions/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"encapsulatedAssertions",
										"template"
									]
								},
								"description": "Returns a template, which is an example encapsulated assertion that can be used as a reference for what\n encapsulated assertion objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/encapsulatedAssertions/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"encapsulatedAssertions",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "firewall Rules",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/firewallRules/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/firewallRules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"firewallRules",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the firewall rule to delete."
												}
											]
										},
										"description": "Deletes an existing firewall rule.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/firewallRules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"firewallRules",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the firewall rule to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/firewallRules/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/firewallRules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"firewallRules",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the firewall rule to return"
												}
											]
										},
										"description": "Returns a firewall rule with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/firewallRules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"firewallRules",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the firewall rule to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/firewallRules/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/firewallRules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"firewallRules",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the firewall rule to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing firewall rule. If a firewall rule with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nUpdate"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/firewallRules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"firewallRules",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the firewall rule to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/firewallRules",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/firewallRules?sort=<string>&order=<string>&name=<string>&enabled=<boolean>&ordinal=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"firewallRules"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "enabled",
											"value": "<boolean>",
											"description": "Enabled filter"
										},
										{
											"key": "ordinal",
											"value": "<string>",
											"description": "Ordinal filter"
										}
									]
								},
								"description": "<p>Returns a list of firewall rules. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/firewallRules?name=MyFirewallRule</pre></div>\n <p>Returns firewall rule with name \"MyFirewallRule\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/firewallRules?sort=<string>&order=<string>&name=<string>&enabled=<boolean>&ordinal=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"firewallRules"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "enabled",
													"value": "<boolean>"
												},
												{
													"key": "ordinal",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/firewallRules",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/firewallRules",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"firewallRules"
									]
								},
								"description": "Creates a new firewall rule\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/firewallRules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"firewallRules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/firewallRules/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/firewallRules/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"firewallRules",
										"template"
									]
								},
								"description": "Returns a template, which is an example firewall rule that can be used as a reference for what firewall rule objects\n should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/firewallRules/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"firewallRules",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "folders",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/folders/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/folders/:id?force=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"folders",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "false",
													"description": "If true, deletes folder and its contents"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The id of the folder to delete."
												}
											]
										},
										"description": "Deletes an existing folder.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/folders/:id?force=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"folders",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The id of the folder to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/folders/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/folders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"folders",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the folder to return"
												}
											]
										},
										"description": "Returns a folder with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/folders/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"folders",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the folder to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/folders/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/folders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"folders",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the folder to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing folder. If a folder with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/folders/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"folders",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the folder to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/folders/:id/dependencies",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/folders/:id/dependencies?level=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"folders",
												":id",
												"dependencies"
											],
											"query": [
												{
													"key": "level",
													"value": "-1",
													"description": "How deep to search for the dependencies. 0 for none, 1 for immediate dependencies, -1 for full depth search\n1.0.1"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										},
										"description": "Returns the list of dependencies for this entity.\nGet Dependencies\nGet Dependencies"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/folders/:id/dependencies?level=-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"folders",
														":id",
														"dependencies"
													],
													"query": [
														{
															"key": "level",
															"value": "-1"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/folders",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/folders?sort=<string>&order=<string>&name=<string>&parentFolder.id=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"folders"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "parentFolder.id",
											"value": "<string>",
											"description": "The parent folder filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of folders. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/folders?name=MyFolder</pre></div>\n <p>Returns folder with name \"MyFolder\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/folders?sort=<string>&order=<string>&name=<string>&parentFolder.id=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"folders"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "parentFolder.id",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/folders",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/folders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"folders"
									]
								},
								"description": "Creates a new folder\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/folders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"folders"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/folders/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/folders/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"folders",
										"template"
									]
								},
								"description": "Returns a template, which is an example folder that can be used as a reference for what folder objects should\n look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/folders/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"folders",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "generic Entities",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/genericEntities/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/genericEntities/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"genericEntities",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the generic entity to delete."
												}
											]
										},
										"description": "Deletes an existing generic entity.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/genericEntities/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"genericEntities",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the generic entity to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/genericEntities/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/genericEntities/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"genericEntities",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the generic entity to retrieve"
												}
											]
										},
										"description": "Retrieves a generic entity given its ID\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/genericEntities/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"genericEntities",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the generic entity to retrieve"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/genericEntities/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/genericEntities/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"genericEntities",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the generic entity to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing generic entity. If a generic entity with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/genericEntities/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"genericEntities",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the generic entity to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/genericEntities",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/genericEntities?sort=<string>&order=<string>&name=<string>&enabled=<boolean>&entityClassName=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"genericEntities"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                         ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "enabled",
											"value": "<boolean>",
											"description": "Enabled filter"
										},
										{
											"key": "entityClassName",
											"value": "<string>",
											"description": "Entity class name filter"
										}
									]
								},
								"description": "<p>Returns a list of generic entities. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/activeConnectors?name=MyGenericEntity</pre></div>\n <p>Returns generic entity with name \"MyGenericEntity\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/genericEntities?sort=<string>&order=<string>&name=<string>&enabled=<boolean>&entityClassName=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"genericEntities"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "enabled",
													"value": "<boolean>"
												},
												{
													"key": "entityClassName",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/genericEntities",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/genericEntities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"genericEntities"
									]
								},
								"description": "Creates a new generic entity.\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/genericEntities",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"genericEntities"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/genericEntities/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/genericEntities/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"genericEntities",
										"template"
									]
								},
								"description": "Returns a template, which is an example generic entity that can be used as a reference for what generic entity\n objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/genericEntities/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"genericEntities",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "groups",
					"item": [
						{
							"name": "/1.0/groups",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/groups?sort=<string>&order=<string>&name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"groups"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by."
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n              ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										}
									]
								},
								"description": "<p>Returns a list of groups. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList Groups"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/groups?sort=<string>&order=<string>&name=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"groups"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/groups/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/groups/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"groups",
										"template"
									]
								},
								"description": "Returns a template, which is an example group that can be used as a reference for what group objects should look\n like.\nGroup Template"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/groups/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"groups",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/groups/:groupID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/groups/:groupID",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"groups",
										":groupID"
									],
									"variable": [
										{
											"key": "groupID",
											"value": "<string>",
											"description": "(Required) The ID of the group to return"
										}
									]
								},
								"description": "Returns a group with the given ID.\nGet Group"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/groups/:groupID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"groups",
												":groupID"
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<string>",
													"description": "(Required) The ID of the group to return"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "http Configurations",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/httpConfigurations/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/httpConfigurations/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"httpConfigurations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the HTTP configuration to delete."
												}
											]
										},
										"description": "Deletes an existing HTTP configuration.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/httpConfigurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"httpConfigurations",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the HTTP configuration to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/httpConfigurations/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/httpConfigurations/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"httpConfigurations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the HTTP configuration to return"
												}
											]
										},
										"description": "Returns an HTTP configuration with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/httpConfigurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"httpConfigurations",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the HTTP configuration to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/httpConfigurations/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/httpConfigurations/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"httpConfigurations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the HTTP configuration to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing HTTP configuration. If an HTTP configuration with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nUpdate"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/httpConfigurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"httpConfigurations",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the HTTP configuration to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/httpConfigurations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/httpConfigurations?sort=<string>&order=<string>&host=<string>&protocol=<string>&ntlmHost=<string>&ntlmDomain=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"httpConfigurations"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "host",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "protocol",
											"value": "<string>",
											"description": "Protocol filter"
										},
										{
											"key": "ntlmHost",
											"value": "<string>",
											"description": "NtlmHost filter"
										},
										{
											"key": "ntlmDomain",
											"value": "<string>",
											"description": "NtlmDomain id filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of HTTP configurations. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/httpConfigurations?name=MyHTTPConfiguration</pre></div>\n <p>Returns HTTP configuration with name \"MyHTTPConfiguration\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/httpConfigurations?sort=<string>&order=<string>&host=<string>&protocol=<string>&ntlmHost=<string>&ntlmDomain=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"httpConfigurations"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "protocol",
													"value": "<string>"
												},
												{
													"key": "ntlmHost",
													"value": "<string>"
												},
												{
													"key": "ntlmDomain",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/httpConfigurations",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/httpConfigurations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"httpConfigurations"
									]
								},
								"description": "Creates a new HTTP configuration.\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/httpConfigurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"httpConfigurations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/httpConfigurations/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/httpConfigurations/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"httpConfigurations",
										"template"
									]
								},
								"description": "Returns a template, which is an example HTTP configuration that can be used as a reference for what HTTP\n configuration objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/httpConfigurations/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"httpConfigurations",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "identity Providers",
					"item": [
						{
							"name": "{identity Provider ID}",
							"item": [
								{
									"name": "groups",
									"item": [
										{
											"name": "/1.0/identityProviders/:identityProviderID/groups",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/groups?sort=<string>&order=<string>&name=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"identityProviders",
														":identityProviderID",
														"groups"
													],
													"query": [
														{
															"key": "sort",
															"value": "<string>",
															"description": "Key to sort the list by."
														},
														{
															"key": "order",
															"value": "<string>",
															"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n              ascending if not specified"
														},
														{
															"key": "name",
															"value": "<string>",
															"description": "Name filter"
														}
													],
													"variable": [
														{
															"key": "identityProviderID"
														}
													]
												},
												"description": "<p>Returns a list of groups. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList Groups"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/groups?sort=<string>&order=<string>&name=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"identityProviders",
																":identityProviderID",
																"groups"
															],
															"query": [
																{
																	"key": "sort",
																	"value": "<string>"
																},
																{
																	"key": "order",
																	"value": "<string>"
																},
																{
																	"key": "name",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "identityProviderID"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "/1.0/identityProviders/:identityProviderID/groups/template",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/groups/template",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"identityProviders",
														":identityProviderID",
														"groups",
														"template"
													],
													"variable": [
														{
															"key": "identityProviderID"
														}
													]
												},
												"description": "Returns a template, which is an example group that can be used as a reference for what group objects should look\n like.\nGroup Template"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/groups/template",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"identityProviders",
																":identityProviderID",
																"groups",
																"template"
															],
															"variable": [
																{
																	"key": "identityProviderID"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "/1.0/identityProviders/:identityProviderID/groups/:groupID",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/groups/:groupID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"identityProviders",
														":identityProviderID",
														"groups",
														":groupID"
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<string>",
															"description": "(Required) The ID of the group to return"
														}
													]
												},
												"description": "Returns a group with the given ID.\nGet Group"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/groups/:groupID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"identityProviders",
																":identityProviderID",
																"groups",
																":groupID"
															],
															"variable": [
																{
																	"key": "groupID",
																	"value": "<string>",
																	"description": "(Required) The ID of the group to return"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "users",
									"item": [
										{
											"name": "{user ID}",
											"item": [
												{
													"name": "certificate",
													"item": [
														{
															"name": "/1.0/identityProviders/:identityProviderID/users/:userID/certificate",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/:userID/certificate",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"identityProviders",
																		":identityProviderID",
																		"users",
																		":userID",
																		"certificate"
																	],
																	"variable": [
																		{
																			"key": "userID",
																			"value": "<string>",
																			"description": "(Required) The ID of the user"
																		}
																	]
																},
																"description": "Removes the certificate from the user\nDelete User Certificate"
															},
															"response": [
																{
																	"name": "Successful Response",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/:userID/certificate",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"1.0",
																				"identityProviders",
																				":identityProviderID",
																				"users",
																				":userID",
																				"certificate"
																			],
																			"variable": [
																				{
																					"key": "userID",
																					"value": "<string>",
																					"description": "(Required) The ID of the user"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "/1.0/identityProviders/:identityProviderID/users/:userID/certificate",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/:userID/certificate",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"identityProviders",
																		":identityProviderID",
																		"users",
																		":userID",
																		"certificate"
																	],
																	"variable": [
																		{
																			"key": "userID",
																			"value": "<string>",
																			"description": "(Required) The ID of the user"
																		}
																	]
																},
																"description": "Gets the user's certificate\nGet User Certificate"
															},
															"response": [
																{
																	"name": "Successful Response",
																	"originalRequest": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/:userID/certificate",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"1.0",
																				"identityProviders",
																				":identityProviderID",
																				"users",
																				":userID",
																				"certificate"
																			],
																			"variable": [
																				{
																					"key": "userID",
																					"value": "<string>",
																					"description": "(Required) The ID of the user"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "/1.0/identityProviders/:identityProviderID/users/:userID/certificate",
															"request": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/:userID/certificate",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"identityProviders",
																		":identityProviderID",
																		"users",
																		":userID",
																		"certificate"
																	],
																	"variable": [
																		{
																			"key": "userID",
																			"value": "<string>",
																			"description": "(Required) The ID of the user"
																		}
																	]
																},
																"description": "Set this user's certificate\nSet User Certificate"
															},
															"response": [
																{
																	"name": "Successful Response",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/:userID/certificate",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"1.0",
																				"identityProviders",
																				":identityProviderID",
																				"users",
																				":userID",
																				"certificate"
																			],
																			"variable": [
																				{
																					"key": "userID",
																					"value": "<string>",
																					"description": "(Required) The ID of the user"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												},
												{
													"name": "/1.0/identityProviders/:identityProviderID/users/:userID",
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/:userID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"identityProviders",
																":identityProviderID",
																"users",
																":userID"
															],
															"variable": [
																{
																	"key": "userID",
																	"value": "<string>",
																	"description": "(Required) The ID of the user to delete."
																}
															]
														},
														"description": "Deletes an existing user\nDelete User"
													},
													"response": [
														{
															"name": "Successful Response",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/:userID",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"identityProviders",
																		":identityProviderID",
																		"users",
																		":userID"
																	],
																	"variable": [
																		{
																			"key": "userID",
																			"value": "<string>",
																			"description": "(Required) The ID of the user to delete."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "/1.0/identityProviders/:identityProviderID/users/:userID",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/:userID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"identityProviders",
																":identityProviderID",
																"users",
																":userID"
															],
															"variable": [
																{
																	"key": "userID",
																	"value": "<string>",
																	"description": "(Required) The ID of the user to return"
																}
															]
														},
														"description": "Returns a user with the given ID.\nGet User"
													},
													"response": [
														{
															"name": "Successful Response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/:userID",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"identityProviders",
																		":identityProviderID",
																		"users",
																		":userID"
																	],
																	"variable": [
																		{
																			"key": "userID",
																			"value": "<string>",
																			"description": "(Required) The ID of the user to return"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "/1.0/identityProviders/:identityProviderID/users/:userID",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/:userID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"identityProviders",
																":identityProviderID",
																"users",
																":userID"
															],
															"variable": [
																{
																	"key": "userID",
																	"value": "<string>",
																	"description": "(Required) The ID of the user to update"
																}
															]
														},
														"description": "Updates an existing user\nUpdate User"
													},
													"response": [
														{
															"name": "Successful Response",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/:userID",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"identityProviders",
																		":identityProviderID",
																		"users",
																		":userID"
																	],
																	"variable": [
																		{
																			"key": "userID",
																			"value": "<string>",
																			"description": "(Required) The ID of the user to update"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "/1.0/identityProviders/:identityProviderID/users/:userID/password",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/:userID/password?format=plain",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"identityProviders",
																":identityProviderID",
																"users",
																":userID",
																"password"
															],
															"query": [
																{
																	"key": "format",
																	"value": "plain",
																	"description": "The format of the password. \"plain\" or \"sha512crypt\""
																}
															],
															"variable": [
																{
																	"key": "userID",
																	"value": "<string>",
																	"description": "(Required) The ID of the user"
																}
															]
														},
														"description": "Change this user's password\nChange User Password"
													},
													"response": [
														{
															"name": "Successful Response",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/:userID/password?format=plain",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"identityProviders",
																		":identityProviderID",
																		"users",
																		":userID",
																		"password"
																	],
																	"query": [
																		{
																			"key": "format",
																			"value": "plain"
																		}
																	],
																	"variable": [
																		{
																			"key": "userID",
																			"value": "<string>",
																			"description": "(Required) The ID of the user"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "/1.0/identityProviders/:identityProviderID/users",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users?sort=<string>&order=<string>&login=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"identityProviders",
														":identityProviderID",
														"users"
													],
													"query": [
														{
															"key": "sort",
															"value": "<string>",
															"description": "Key to sort the list by."
														},
														{
															"key": "order",
															"value": "<string>",
															"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n               ascending if not specified"
														},
														{
															"key": "login",
															"value": "<string>",
															"description": "Login filter"
														}
													],
													"variable": [
														{
															"key": "identityProviderID"
														}
													]
												},
												"description": "<p>Returns a list of users. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList Users"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users?sort=<string>&order=<string>&login=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"identityProviders",
																":identityProviderID",
																"users"
															],
															"query": [
																{
																	"key": "sort",
																	"value": "<string>"
																},
																{
																	"key": "order",
																	"value": "<string>"
																},
																{
																	"key": "login",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "identityProviderID"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "/1.0/identityProviders/:identityProviderID/users",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"identityProviders",
														":identityProviderID",
														"users"
													],
													"variable": [
														{
															"key": "identityProviderID"
														}
													]
												},
												"description": "Creates a new user. New users can only be created on the internal identity provider.\nCreate User"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"identityProviders",
																":identityProviderID",
																"users"
															],
															"variable": [
																{
																	"key": "identityProviderID"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "/1.0/identityProviders/:identityProviderID/users/template",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/template",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"identityProviders",
														":identityProviderID",
														"users",
														"template"
													],
													"variable": [
														{
															"key": "identityProviderID"
														}
													]
												},
												"description": "Returns a template, which is an example user that can be used as a reference for what user objects should look\n like.\nTemplate User"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID/users/template",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"identityProviders",
																":identityProviderID",
																"users",
																"template"
															],
															"variable": [
																{
																	"key": "identityProviderID"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "/1.0/identityProviders/:identityProviderID",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"identityProviders",
												":identityProviderID"
											],
											"variable": [
												{
													"key": "identityProviderID",
													"value": "<string>",
													"description": "(Required) The ID of the identity provider to delete."
												}
											]
										},
										"description": "Deletes an existing identity provider.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"identityProviders",
														":identityProviderID"
													],
													"variable": [
														{
															"key": "identityProviderID",
															"value": "<string>",
															"description": "(Required) The ID of the identity provider to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/identityProviders/:identityProviderID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"identityProviders",
												":identityProviderID"
											],
											"variable": [
												{
													"key": "identityProviderID",
													"value": "<string>",
													"description": "(Required) The ID of the identity provider to return"
												}
											]
										},
										"description": "Returns an identity provider with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"identityProviders",
														":identityProviderID"
													],
													"variable": [
														{
															"key": "identityProviderID",
															"value": "<string>",
															"description": "(Required) The ID of the identity provider to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/identityProviders/:identityProviderID",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"identityProviders",
												":identityProviderID"
											],
											"variable": [
												{
													"key": "identityProviderID",
													"value": "<string>",
													"description": "(Required) ID of the identity provider to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing identity provider. If an identity provider with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/identityProviders/:identityProviderID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"identityProviders",
														":identityProviderID"
													],
													"variable": [
														{
															"key": "identityProviderID",
															"value": "<string>",
															"description": "(Required) ID of the identity provider to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/identityProviders",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/identityProviders?sort=<string>&order=<string>&name=<string>&type=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"identityProviders"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "type",
											"value": "<string>",
											"description": "Type filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of identity providers. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/identityProviders?name=MyIDProvider</pre></div>\n <p>Returns identity provider with name \"MyIDProvider\".</p>\n <div class=\"code indent\"><pre>/restman/1.0/identityProviders?type=LDAP</pre></div>\n <p>Returns identity providers of LDAP type</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/identityProviders?sort=<string>&order=<string>&name=<string>&type=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"identityProviders"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/identityProviders",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/identityProviders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"identityProviders"
									]
								},
								"description": "Creates an identity provider\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/identityProviders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"identityProviders"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/identityProviders/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/identityProviders/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"identityProviders",
										"template"
									]
								},
								"description": "Returns a template, which is an example identity provider that can be used as a reference for what identity\n provider objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/identityProviders/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"identityProviders",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "interface Tags",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/interfaceTags/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/interfaceTags/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"interfaceTags",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the interface tag to delete."
												}
											]
										},
										"description": "Deletes an existing interface tag.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/interfaceTags/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"interfaceTags",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the interface tag to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/interfaceTags/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/interfaceTags/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"interfaceTags",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The identity of the interface tag to select"
												}
											]
										},
										"description": "Retrieves an interface tag given it's ID. In order to get an interface tag you must have read access to cluster\n properties.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/interfaceTags/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"interfaceTags",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The identity of the interface tag to select"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/interfaceTags/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/interfaceTags/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"interfaceTags",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the interface tag to update"
												}
											]
										},
										"description": "Updates an existing interface tag. You cannot change the name of an interface, you can only update its address\n patterns. In order to update an interface tag you must have read and write access to cluster properties.\nUpdate"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/interfaceTags/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"interfaceTags",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the interface tag to update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/interfaceTags",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/interfaceTags?sort=<string>&order=<string>&name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"interfaceTags"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n              ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter. This will return interfaces with the specified names."
										}
									]
								},
								"description": "Returns a list of interface tags. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/interfaceTags?name=MyInterface</pre></div>\n <p>Returns interface with name = \"MyInterface\"</p>\n <div class=\"code indent\"><pre>/restman/interfaceTags?name=MyInterface&name=MyInterfaceProd</pre></div>\n <p>Returns interfaces with name either \"MyInterface\" or \"MyInterfaceProd\"</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/interfaceTags?sort=<string>&order=<string>&name=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"interfaceTags"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/interfaceTags",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/interfaceTags",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"interfaceTags"
									]
								},
								"description": "Creates a new interface. In order to create a new interface tag you must have read and write access to cluster\n properties.\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/interfaceTags",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"interfaceTags"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/interfaceTags/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/interfaceTags/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"interfaceTags",
										"template"
									]
								},
								"description": "Returns a template, which is an example interface tag that can be used as a reference for what interface tag\n objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/interfaceTags/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"interfaceTags",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "jdbc Connections",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/jdbcConnections/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/jdbcConnections/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"jdbcConnections",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the JDBC connection to delete."
												}
											]
										},
										"description": "Deletes an existing JDBC connection.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/jdbcConnections/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"jdbcConnections",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the JDBC connection to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/jdbcConnections/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/jdbcConnections/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"jdbcConnections",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the JDBC connection to return"
												}
											]
										},
										"description": "Returns a JDBC connection with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/jdbcConnections/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"jdbcConnections",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the JDBC connection to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/jdbcConnections/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/jdbcConnections/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"jdbcConnections",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the JDBC connection to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing JDBC connection. If a JDBC connection with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/jdbcConnections/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"jdbcConnections",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the JDBC connection to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/jdbcConnections",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/jdbcConnections?sort=<string>&order=<string>&name=<string>&enabled=<boolean>&jdbcUrl=<string>&driverClass=<string>&userName=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"jdbcConnections"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "enabled",
											"value": "<boolean>",
											"description": "Enabled filter"
										},
										{
											"key": "jdbcUrl",
											"value": "<string>",
											"description": "JDBC URL filter"
										},
										{
											"key": "driverClass",
											"value": "<string>",
											"description": "Driver class name filter"
										},
										{
											"key": "userName",
											"value": "<string>",
											"description": "User name filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of JDBC connections. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/jdbcConnections?name=MyJDBCConnection</pre></div>\n <p>Returns JDBC connection with name \"MyJDBCConnection\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/jdbcConnections?sort=<string>&order=<string>&name=<string>&enabled=<boolean>&jdbcUrl=<string>&driverClass=<string>&userName=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"jdbcConnections"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "enabled",
													"value": "<boolean>"
												},
												{
													"key": "jdbcUrl",
													"value": "<string>"
												},
												{
													"key": "driverClass",
													"value": "<string>"
												},
												{
													"key": "userName",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/jdbcConnections",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/jdbcConnections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"jdbcConnections"
									]
								},
								"description": "Creates a new JDBC connection\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/jdbcConnections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"jdbcConnections"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/jdbcConnections/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/jdbcConnections/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"jdbcConnections",
										"template"
									]
								},
								"description": "Returns a template, which is an example JDBC connection that can be used as a reference for what JDBC connection\n objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/jdbcConnections/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"jdbcConnections",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "jms Destinations",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/jmsDestinations/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/jmsDestinations/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"jmsDestinations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the JMS destination to delete."
												}
											]
										},
										"description": "Deletes an existing JMS destination.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/jmsDestinations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"jmsDestinations",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the JMS destination to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/jmsDestinations/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/jmsDestinations/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"jmsDestinations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the JMS destination to return"
												}
											]
										},
										"description": "Returns an JMS destination with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/jmsDestinations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"jmsDestinations",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the JMS destination to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/jmsDestinations/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/jmsDestinations/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"jmsDestinations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the JMS destination to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing JMS destination. If an JMS destination with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/jmsDestinations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"jmsDestinations",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the JMS destination to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/jmsDestinations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/jmsDestinations?sort=<string>&order=<string>&name=<string>&enabled=<boolean>&inbound=<boolean>&template=<boolean>&destination=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"jmsDestinations"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "enabled",
											"value": "<boolean>",
											"description": "Enabled filter"
										},
										{
											"key": "inbound",
											"value": "<boolean>",
											"description": "Inbound filter"
										},
										{
											"key": "template",
											"value": "<boolean>",
											"description": "Template filter"
										},
										{
											"key": "destination",
											"value": "<string>",
											"description": "Destination filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of JMS destinations. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/jmsDestinations?name=MyJMSDestination</pre></div>\n <p>Returns JMS destination with name \"MyJMSDestination\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/jmsDestinations?sort=<string>&order=<string>&name=<string>&enabled=<boolean>&inbound=<boolean>&template=<boolean>&destination=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"jmsDestinations"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "enabled",
													"value": "<boolean>"
												},
												{
													"key": "inbound",
													"value": "<boolean>"
												},
												{
													"key": "template",
													"value": "<boolean>"
												},
												{
													"key": "destination",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/jmsDestinations",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/jmsDestinations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"jmsDestinations"
									]
								},
								"description": "Creates a new JMS destination\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/jmsDestinations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"jmsDestinations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/jmsDestinations/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/jmsDestinations/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"jmsDestinations",
										"template"
									]
								},
								"description": "Returns a template, which is an example JMS destination that can be used as a reference for what JMS destination\n objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/jmsDestinations/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"jmsDestinations",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "listen Ports",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/listenPorts/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/listenPorts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"listenPorts",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the listen port to delete."
												}
											]
										},
										"description": "Deletes an existing listen port.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/listenPorts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"listenPorts",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the listen port to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/listenPorts/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/listenPorts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"listenPorts",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the listen port to return"
												}
											]
										},
										"description": "Returns a listen port with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/listenPorts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"listenPorts",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the listen port to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/listenPorts/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/listenPorts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"listenPorts",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the listen port to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing listen port. If a listen port with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nUpdate"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/listenPorts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"listenPorts",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the listen port to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/listenPorts",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/listenPorts?sort=<string>&order=<string>&name=<string>&enabled=<boolean>&protocol=<string>&port=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"listenPorts"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "enabled",
											"value": "<boolean>",
											"description": "Enabled filter"
										},
										{
											"key": "protocol",
											"value": "<string>",
											"description": "Protocol filter"
										},
										{
											"key": "port",
											"value": "<string>",
											"description": "Port filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of listen ports. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/listenPorts?name=MyListenPort</pre></div>\n <p>Returns listen port with name \"MyListenPort\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/listenPorts?sort=<string>&order=<string>&name=<string>&enabled=<boolean>&protocol=<string>&port=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"listenPorts"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "enabled",
													"value": "<boolean>"
												},
												{
													"key": "protocol",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/listenPorts",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/listenPorts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"listenPorts"
									]
								},
								"description": "Creates a new listen port\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/listenPorts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"listenPorts"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/listenPorts/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/listenPorts/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"listenPorts",
										"template"
									]
								},
								"description": "Returns a template, which is an example listen port that can be used as a reference for what listen port objects\n should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/listenPorts/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"listenPorts",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "log Sinks",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/logSinks/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/logSinks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"logSinks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the Log Sink Configuration to delete."
												}
											]
										},
										"description": "Deletes an existing Log Sink Configuration.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/logSinks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"logSinks",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the Log Sink Configuration to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/logSinks/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/logSinks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"logSinks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the Log Sink Configuration to return"
												}
											]
										},
										"description": "Returns a Log Sink Configuration with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/logSinks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"logSinks",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the Log Sink Configuration to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/logSinks/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/logSinks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"logSinks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the Log Sink Configuration to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing Log Sink Configuration. If a Log Sink Configuration with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/logSinks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"logSinks",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the Log Sink Configuration to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/logSinks/:id/dependencies",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/logSinks/:id/dependencies?level=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"logSinks",
												":id",
												"dependencies"
											],
											"query": [
												{
													"key": "level",
													"value": "-1",
													"description": "How deep to search for the dependencies. 0 for none, 1 for immediate dependencies, -1 for full depth search\n1.0.1"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										},
										"description": "Returns the list of dependencies for this entity.\nGet Dependencies\nGet Dependencies"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/logSinks/:id/dependencies?level=-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"logSinks",
														":id",
														"dependencies"
													],
													"query": [
														{
															"key": "level",
															"value": "-1"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/logSinks",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/logSinks?sort=<string>&order=<string>&name=<string>&type=<string>&enabled=<boolean>&description=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"logSinks"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "type",
											"value": "<string>",
											"description": "Type filter"
										},
										{
											"key": "enabled",
											"value": "<boolean>",
											"description": "Description filter"
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "Enabled filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of Log Sink Configurations. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/LogSinks?name=MyLogSink</pre></div>\n <p>Returns Log Sink Configuration with name \"MyLogSink\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/logSinks?sort=<string>&order=<string>&name=<string>&type=<string>&enabled=<boolean>&description=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"logSinks"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "<string>"
												},
												{
													"key": "enabled",
													"value": "<boolean>"
												},
												{
													"key": "description",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/logSinks",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/logSinks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"logSinks"
									]
								},
								"description": "Creates a new Log Sink Configuration\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/logSinks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"logSinks"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/logSinks/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/logSinks/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"logSinks",
										"template"
									]
								},
								"description": "Returns a template, which is an example Log Sink Configuration that can be used as a reference for what Log Sink Configuration\n objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/logSinks/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"logSinks",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "passwords",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/passwords/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/passwords/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"passwords",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the secure password to delete."
												}
											]
										},
										"description": "Deletes an existing secure password.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/passwords/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"passwords",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the secure password to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/passwords/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/passwords/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"passwords",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the secure password to return"
												}
											]
										},
										"description": "Returns a secure password with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/passwords/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"passwords",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the secure password to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/passwords/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/passwords/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"passwords",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the secure password to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing secure password. If a secure password with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/passwords/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"passwords",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the secure password to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/passwords",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/passwords?sort=<string>&order=<string>&name=<string>&type=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"passwords"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n              ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "type",
											"value": "<string>",
											"description": "Type filter"
										}
									]
								},
								"description": "<p>Returns a list of secure passwords. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/passwords?name=MyPassword</pre></div>\n <p>Returns secure password with name \"MyPassword\".</p>\n <div class=\"code indent\"><pre>/restman/1.0/passwords?type=Password&name=MyPassword&name=MyOtherPassword</pre></div>\n <p>Returns secure password of Password type with name either \"MyPassword\" or\n \"MyOtherPassword\"</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/passwords?sort=<string>&order=<string>&name=<string>&type=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"passwords"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/passwords",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/passwords",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"passwords"
									]
								},
								"description": "Creates a new secure password\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/passwords",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"passwords"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/passwords/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/passwords/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"passwords",
										"template"
									]
								},
								"description": "Returns a template, which is an example secure password that can be used as a reference for what secure password\n objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/passwords/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"passwords",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "policies",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "versions",
									"item": [
										{
											"name": "active",
											"item": [
												{
													"name": "/1.0/policies/:id/versions/active",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/policies/:id/versions/active",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"policies",
																":id",
																"versions",
																"active"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														},
														"description": "Returns the active policy version.\nGet Active Version"
													},
													"response": [
														{
															"name": "Successful Response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/policies/:id/versions/active",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"policies",
																		":id",
																		"versions",
																		"active"
																	],
																	"variable": [
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "/1.0/policies/:id/versions/active/comment",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/policies/:id/versions/active/comment",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"policies",
																":id",
																"versions",
																"active",
																"comment"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														},
														"description": "Sets a comment on the active policy version\nSet Active Version Comment"
													},
													"response": [
														{
															"name": "Successful Response",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/policies/:id/versions/active/comment",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"policies",
																		":id",
																		"versions",
																		"active",
																		"comment"
																	],
																	"variable": [
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "{version Number}",
											"item": [
												{
													"name": "/1.0/policies/:id/versions/:versionNumber",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/policies/:id/versions/:versionNumber",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"policies",
																":id",
																"versions",
																":versionNumber"
															],
															"variable": [
																{
																	"key": "versionNumber",
																	"value": "<long>",
																	"description": "(Required) Version of the policy to return."
																}
															]
														},
														"description": "Retrieve a policy version by the version number\nGet Version"
													},
													"response": [
														{
															"name": "Successful Response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/policies/:id/versions/:versionNumber",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"policies",
																		":id",
																		"versions",
																		":versionNumber"
																	],
																	"variable": [
																		{
																			"key": "versionNumber",
																			"value": "<long>",
																			"description": "(Required) Version of the policy to return."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "/1.0/policies/:id/versions/:versionNumber/activate",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/policies/:id/versions/:versionNumber/activate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"policies",
																":id",
																"versions",
																":versionNumber",
																"activate"
															],
															"variable": [
																{
																	"key": "versionNumber",
																	"value": "<long>",
																	"description": "(Required) Version of the policy version to set active."
																}
															]
														},
														"description": "Activates the specified policy version\nActivate Version"
													},
													"response": [
														{
															"name": "Successful Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/policies/:id/versions/:versionNumber/activate",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"policies",
																		":id",
																		"versions",
																		":versionNumber",
																		"activate"
																	],
																	"variable": [
																		{
																			"key": "versionNumber",
																			"value": "<long>",
																			"description": "(Required) Version of the policy version to set active."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "/1.0/policies/:id/versions/:versionNumber/comment",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/policies/:id/versions/:versionNumber/comment",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"policies",
																":id",
																"versions",
																":versionNumber",
																"comment"
															],
															"variable": [
																{
																	"key": "versionNumber",
																	"value": "<long>",
																	"description": "(Required) Version of the policy version to set the comment on."
																}
															]
														},
														"description": "Sets the comment on a specific policy version.\nSet Version Comment"
													},
													"response": [
														{
															"name": "Successful Response",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/policies/:id/versions/:versionNumber/comment",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"policies",
																		":id",
																		"versions",
																		":versionNumber",
																		"comment"
																	],
																	"variable": [
																		{
																			"key": "versionNumber",
																			"value": "<long>",
																			"description": "(Required) Version of the policy version to set the comment on."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "/1.0/policies/:id/versions",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/policies/:id/versions?sort=<string>&order=<string>&id=<string>&active=<boolean>&comment=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"policies",
														":id",
														"versions"
													],
													"query": [
														{
															"key": "sort",
															"value": "<string>",
															"description": "Key to sort the list by"
														},
														{
															"key": "order",
															"value": "<string>",
															"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                 ascending if not specified"
														},
														{
															"key": "id",
															"value": "<string>",
															"description": "Id filter"
														},
														{
															"key": "active",
															"value": "<boolean>",
															"description": "Active filter"
														},
														{
															"key": "comment",
															"value": "<string>",
															"description": "Comment filter"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												},
												"description": "<p>Returns a list of policy versions. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList Versions"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/policies/:id/versions?sort=<string>&order=<string>&id=<string>&active=<boolean>&comment=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"policies",
																":id",
																"versions"
															],
															"query": [
																{
																	"key": "sort",
																	"value": "<string>"
																},
																{
																	"key": "order",
																	"value": "<string>"
																},
																{
																	"key": "id",
																	"value": "<string>"
																},
																{
																	"key": "active",
																	"value": "<boolean>"
																},
																{
																	"key": "comment",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "/1.0/policies/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policies",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the policy to delete."
												}
											]
										},
										"description": "Deletes an existing policy.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"policies",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the policy to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/policies/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policies",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the policy to return"
												}
											]
										},
										"description": "Returns a policy with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"policies",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the policy to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/policies/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policies/:id?active=true&versionComment=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policies",
												":id"
											],
											"query": [
												{
													"key": "active",
													"value": "true",
													"description": "Should the policy be activated after the update."
												},
												{
													"key": "versionComment",
													"value": "<string>",
													"description": "The comment to add to the policy version when updating the policy"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the policy to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing policy. If a policy with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nUpdate Or Create"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/policies/:id?active=true&versionComment=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"policies",
														":id"
													],
													"query": [
														{
															"key": "active",
															"value": "true"
														},
														{
															"key": "versionComment",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the policy to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/policies/:id/dependencies",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policies/:id/dependencies?level=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policies",
												":id",
												"dependencies"
											],
											"query": [
												{
													"key": "level",
													"value": "-1",
													"description": "How deep to search for the dependencies. 0 for none, 1 for immediate dependencies, -1 for full depth search\n1.0.1"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										},
										"description": "Returns the list of dependencies for this entity.\nGet Dependencies\nGet Dependencies"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/policies/:id/dependencies?level=-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"policies",
														":id",
														"dependencies"
													],
													"query": [
														{
															"key": "level",
															"value": "-1"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/policies",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/policies?sort=<string>&order=<string>&name=<string>&guid=<string>&type=<string>&soap=<boolean>&parentFolder.id=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"policies"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "guid",
											"value": "<string>",
											"description": "Guid filter"
										},
										{
											"key": "type",
											"value": "<string>",
											"description": "Type filter"
										},
										{
											"key": "soap",
											"value": "<boolean>",
											"description": "Soap filter"
										},
										{
											"key": "parentFolder.id",
											"value": "<string>",
											"description": "Parent folder ID filter."
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of policies. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/policies?name=MyPolicy</pre></div>\n <p>Returns policy with name \"MyPolicy\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policies?sort=<string>&order=<string>&name=<string>&guid=<string>&type=<string>&soap=<boolean>&parentFolder.id=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policies"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "guid",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "<string>"
												},
												{
													"key": "soap",
													"value": "<boolean>"
												},
												{
													"key": "parentFolder.id",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/policies",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/policies?versionComment=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"policies"
									],
									"query": [
										{
											"key": "versionComment",
											"value": "<string>",
											"description": "The comment to add to the policy version when creating the policy"
										}
									]
								},
								"description": "Creates a new policy\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policies?versionComment=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policies"
											],
											"query": [
												{
													"key": "versionComment",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/policies/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/policies/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"policies",
										"template"
									]
								},
								"description": "Returns a template, which is an example policy that can be used as a reference for what policy objects should\n look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policies/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policies",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "policy Aliases",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/policyAliases/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policyAliases/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policyAliases",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the policy alias to delete."
												}
											]
										},
										"description": "Deletes an existing policy alias.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/policyAliases/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"policyAliases",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the policy alias to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/policyAliases/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policyAliases/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policyAliases",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the policy alias to return"
												}
											]
										},
										"description": "Returns a policy alias with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/policyAliases/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"policyAliases",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the policy alias to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/policyAliases/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policyAliases/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policyAliases",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the policy alias to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing policy alias. If a policy alias with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nUpdate Or Create"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/policyAliases/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"policyAliases",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the policy alias to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/policyAliases",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/policyAliases?sort=<string>&order=<string>&policy.id=<string>&folder.id=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"policyAliases"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "policy.id",
											"value": "<string>",
											"description": "Policy id filter"
										},
										{
											"key": "folder.id",
											"value": "<string>",
											"description": "Folder id filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of policy aliases. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/policyAliases?policy.id=26df9b0abc4dd6780fd9da5929cde13e</pre></div>\n <p>Returns policy aliases for policy with ID \"26df9b0abc4dd6780fd9da5929cde13e\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policyAliases?sort=<string>&order=<string>&policy.id=<string>&folder.id=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policyAliases"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "policy.id",
													"value": "<string>"
												},
												{
													"key": "folder.id",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/policyAliases",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/policyAliases",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"policyAliases"
									]
								},
								"description": "Creates a new policy alias\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policyAliases",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policyAliases"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/policyAliases/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/policyAliases/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"policyAliases",
										"template"
									]
								},
								"description": "Returns a template, which is an example policy alias that can be used as a reference for what policy alias\n objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policyAliases/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policyAliases",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "policy Backed Services",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/policyBackedServices/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policyBackedServices/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policyBackedServices",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the Policy Backed Service to delete."
												}
											]
										},
										"description": "Deletes an existing Policy Backed Service.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/policyBackedServices/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"policyBackedServices",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the Policy Backed Service to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/policyBackedServices/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policyBackedServices/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policyBackedServices",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the Policy Backed Service to return"
												}
											]
										},
										"description": "Returns a Policy Backed Service with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/policyBackedServices/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"policyBackedServices",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the Policy Backed Service to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/policyBackedServices/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policyBackedServices/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policyBackedServices",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the Policy Backed Service to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing Policy Backed Service. If a Policy Backed Service with the given ID does not exist\n one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/policyBackedServices/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"policyBackedServices",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the Policy Backed Service to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/policyBackedServices",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/policyBackedServices?sort=<string>&order=<string>&name=<string>&interface=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"policyBackedServices"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "interface",
											"value": "<string>",
											"description": "Interfaces filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of Policy Backed Services. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/policyBackedServices?name=MyPolicyBackedService</pre></div>\n <p>Returns Policy Backed Service with name \"MyPolicyBackedService\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policyBackedServices?sort=<string>&order=<string>&name=<string>&interface=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policyBackedServices"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "interface",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/policyBackedServices",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/policyBackedServices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"policyBackedServices"
									]
								},
								"description": "Creates a new Policy Backed Service\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policyBackedServices",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policyBackedServices"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/policyBackedServices/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/policyBackedServices/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"policyBackedServices",
										"template"
									]
								},
								"description": "Returns a template, which is an example Policy Backed Service that can be used as a reference for what Policy Backed Service\n objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/policyBackedServices/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"policyBackedServices",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "private Keys",
					"item": [
						{
							"name": "template",
							"item": [
								{
									"name": "/1.0/privateKeys/template",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/privateKeys/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"privateKeys",
												"template"
											]
										},
										"description": "Returns a template, which is an example private key that can be used as a reference for what private key objects\n should look like.\nTemplate"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/privateKeys/template",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"privateKeys",
														"template"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/privateKeys/template/privatekeycreationcontext",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/privateKeys/template/privatekeycreationcontext",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"privateKeys",
												"template",
												"privatekeycreationcontext"
											]
										},
										"description": "Returns a template, which is an example private key creation context that can be used as a reference for what\n private key creation context objects\n should look like.\nTemplate Private Key Creation Context"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/privateKeys/template/privatekeycreationcontext",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"privateKeys",
														"template",
														"privatekeycreationcontext"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/privateKeys/template/privatekeyexportcontext",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/privateKeys/template/privatekeyexportcontext",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"privateKeys",
												"template",
												"privatekeyexportcontext"
											]
										},
										"description": "Returns a template, which is an example private key export context that can be used as a reference for what\n private key export context objects\n should look like.\nTemplate Private Key Export Context"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/privateKeys/template/privatekeyexportcontext",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"privateKeys",
														"template",
														"privatekeyexportcontext"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/privateKeys/template/privatekeyimportcontext",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/privateKeys/template/privatekeyimportcontext",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"privateKeys",
												"template",
												"privatekeyimportcontext"
											]
										},
										"description": "Returns a template, which is an example private key import context that can be used as a reference for what\n private key import context objects\n should look like.\nTemplate Private Key Import Context"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/privateKeys/template/privatekeyimportcontext",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"privateKeys",
														"template",
														"privatekeyimportcontext"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/privateKeys/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/privateKeys/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"privateKeys",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the private key to delete."
												}
											]
										},
										"description": "Deletes an existing private key.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/privateKeys/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"privateKeys",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the private key to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/privateKeys/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/privateKeys/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"privateKeys",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the private key to retrieve"
												}
											]
										},
										"description": "Retrieve a private key by its ID. The ID is a combination of the keystoreId and the key alias separated by a\n ':'.\n For example 00000000000000000000000000000002:mykey\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/privateKeys/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"privateKeys",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the private key to retrieve"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/privateKeys/:id",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/privateKeys/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"privateKeys",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the private key to create in the form of [keystore ID]:[alias]"
												}
											]
										},
										"description": "<p>Creates a new private key given a PrivateKeyCreationContext. The PrivateKeyCreationContext is used to specify\n how\n the private key should be created. The PrivateKeyCreationContext dn is the domain name to create the key with.\n The properties are optional but you may specify:</p>\n <table class=\"properties-table\" cellpadding=\"0\" cellspacing=\"0\">\n <tr><th>Key</th><th>Type</th><th>Description</th></tr>\n <tr>\n <td>ecName</td>\n <td>String</td>\n <td>This the Elliptic Curve key type to use. If it is not specified an RSA key type is used.</td>\n </tr>\n <tr>\n <td>rsaKeySize</td>\n <td>Integer</td>\n <td>This is the rsa key size to use. This is only applicable if an ecName is not specified. Defaults to\n 2048</td>\n </tr>\n <tr>\n <td>daysUntilExpiry</td>\n <td>Integer</td>\n <td>Specify the number of days until the key expires. Defaults to 5 years.</td>\n </tr>\n <tr>\n <td>caCapable</td>\n <td>Boolean</td>\n <td>Specify if the certificate should be CA capable. Defaults to false</td>\n </tr>\n <tr>\n <td>signatureHashAlgorithm</td>\n <td>String</td>\n <td>The algorithm used for the signature hash.</td>\n </tr>\n <tr>\n <td>signatureAlgorithm</td>\n <td>String</td>\n <td>The final signature algorithm will be derived from key type, hash, and signature algorithm. Leave empty for default behaviour. RSA key type will default to RSASSA-PKCS1-v1_5. EC key type will default to ECDSA. Specify 'RSASSA-PSS' for RSASSA-PSS signature algorithm.</td>\n </tr>\n </table>\n <p class=\"italicize\">Example request:</p>\n <div class=\"code\">\n <pre>\n &lt;l7:PrivateKeyCreationContext xmlns:l7=&quot;http://ns.l7tech.com/2010/04/gateway-management&quot;&gt;\n     &lt;l7:Dn&gt;CN=srcAlias&lt;/l7:Dn&gt;\n     &lt;l7:Properties&gt;\n         &lt;l7:Property key=&quot;signatureHashAlgorithm&quot;&gt;\n             &lt;l7:StringValue&gt;SHA384&lt;/l7:StringValue&gt;\n         &lt;/l7:Property&gt;\n         &lt;l7:Property key=&quot;signatureAlgorithm&quot;&gt;\n             &lt;l7:StringValue&gt;RSASSA-PSS&lt;/l7:StringValue&gt;\n         &lt;/l7:Property&gt;\n         &lt;l7:Property key=&quot;rsaKeySize&quot;&gt;\n             &lt;l7:IntegerValue&gt;516&lt;/l7:IntegerValue&gt;\n         &lt;/l7:Property&gt;\n         &lt;l7:Property key=&quot;ecName&quot;&gt;\n             &lt;l7:StringValue&gt;secp384r1&lt;/l7:StringValue&gt;\n         &lt;/l7:Property&gt;\n         &lt;l7:Property key=&quot;daysUntilExpiry&quot;&gt;\n             &lt;l7:IntegerValue&gt;2&lt;/l7:IntegerValue&gt;\n         &lt;/l7:Property&gt;\n         &lt;l7:Property key=&quot;caCapable&quot;&gt;\n             &lt;l7:BooleanValue&gt;true&lt;/l7:BooleanValue&gt;\n         &lt;/l7:Property&gt;\n     &lt;/l7:Properties&gt;\n &lt;/l7:PrivateKeyCreationContext&gt;\n </pre>\n </div>\n <p>This responds with a reference to the newly created private key.</p>\nCreate Resource"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/privateKeys/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"privateKeys",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the private key to create in the form of [keystore ID]:[alias]"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/privateKeys/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/privateKeys/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"privateKeys",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the private key to update"
												}
											]
										},
										"description": "Updates an existing private key. This api call can be used to replace a private key's certificate chain or\n change\n its\n security zone.\nUpdate"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/privateKeys/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"privateKeys",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the private key to update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/privateKeys/:id/export",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/privateKeys/:id/export",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"privateKeys",
												":id",
												"export"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the key to export"
												}
											]
										},
										"description": "Export a private key.\nExport Private Key"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/privateKeys/:id/export",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"privateKeys",
														":id",
														"export"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the key to export"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/privateKeys/:id/generateCSR",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/privateKeys/:id/generateCSR?csrSubjectDN=<string>&subjectAlternativeName=<string>&signatureHash=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"privateKeys",
												":id",
												"generateCSR"
											],
											"query": [
												{
													"key": "csrSubjectDN",
													"value": "<string>",
													"description": "The CSR subject dn to use. It defaults to the key's subject dn if none is specified."
												},
												{
													"key": "subjectAlternativeName",
													"value": "<string>",
													"description": "The list of subject alternative names, in the form of &lt;type&gt;:&lt;value&gt;. The supported types are: Email, DNS Name, Directory Name, URI and IP Address. No subject alternative names are added to the CSR by default.\n1.0.5"
												},
												{
													"key": "signatureHash",
													"value": "<string>",
													"description": "The signature hash to use. Defaults to 'Automatic'"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the key to generate the CSR from"
												}
											]
										},
										"description": "Generate a certificate signing request for this private key.\nGenerate Csr"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/privateKeys/:id/generateCSR?csrSubjectDN=<string>&subjectAlternativeName=<string>&signatureHash=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"privateKeys",
														":id",
														"generateCSR"
													],
													"query": [
														{
															"key": "csrSubjectDN",
															"value": "<string>"
														},
														{
															"key": "subjectAlternativeName",
															"value": "<string>"
														},
														{
															"key": "signatureHash",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the key to generate the CSR from"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/privateKeys/:id/import",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/privateKeys/:id/import",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"privateKeys",
												":id",
												"import"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID to import the key into"
												}
											]
										},
										"description": "Import a private key.\nImport Private Key"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/privateKeys/:id/import",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"privateKeys",
														":id",
														"import"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID to import the key into"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/privateKeys/:id/signCert",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/privateKeys/:id/signCert?subjectDN=<string>&expiryAge=730&signatureHash=Automatic",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"privateKeys",
												":id",
												"signCert"
											],
											"query": [
												{
													"key": "subjectDN",
													"value": "<string>",
													"description": "The subject DN to set on the signed certificate"
												},
												{
													"key": "expiryAge",
													"value": "730",
													"description": "The expiry age of the certificate"
												},
												{
													"key": "signatureHash",
													"value": "Automatic",
													"description": "The signature hash to use. Defaults to 'Automatic'"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the key to sign the certificate with"
												}
											]
										},
										"description": "Signs a csr pem file with the specified key.\nSign Cert"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/privateKeys/:id/signCert?subjectDN=<string>&expiryAge=730&signatureHash=Automatic",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"privateKeys",
														":id",
														"signCert"
													],
													"query": [
														{
															"key": "subjectDN",
															"value": "<string>"
														},
														{
															"key": "expiryAge",
															"value": "730"
														},
														{
															"key": "signatureHash",
															"value": "Automatic"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the key to sign the certificate with"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/privateKeys/:id/specialPurpose",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/privateKeys/:id/specialPurpose?purpose=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"privateKeys",
												":id",
												"specialPurpose"
											],
											"query": [
												{
													"key": "purpose",
													"value": "<string>",
													"description": "The special purpose to mark the key with. Can specify more then one special purposes."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the key to mark for special purpose"
												}
											]
										},
										"description": "Mark a private key for a special special purpose\nMark Special Purpose"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/privateKeys/:id/specialPurpose?purpose=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"privateKeys",
														":id",
														"specialPurpose"
													],
													"query": [
														{
															"key": "purpose",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the key to mark for special purpose"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/privateKeys",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/privateKeys?sort=<string>&order=<string>&alias=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"privateKeys"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                ascending if not specified"
										},
										{
											"key": "alias",
											"value": "<string>",
											"description": "Alias filter"
										}
									]
								},
								"description": "<p>Returns a list of private keys. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/privateKeys?alias=mykey</pre></div>\n <p>Returns the private key with alias \"mykey\"</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/privateKeys?sort=<string>&order=<string>&alias=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"privateKeys"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "alias",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "resources",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/resources/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/resources/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"resources",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the resource document to delete."
												}
											]
										},
										"description": "Deletes an existing resource document.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/resources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"resources",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the resource document to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/resources/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/resources/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"resources",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the resource document to return"
												}
											]
										},
										"description": "Returns a resource document with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/resources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"resources",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the resource document to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/resources/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/resources/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"resources",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the resource document to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing resource document. If a resource document with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nUpdate"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/resources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"resources",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the resource document to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/resources",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/resources?sort=<string>&order=<string>&uri=<string>&description=<string>&type=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"resources"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "uri",
											"value": "<string>",
											"description": "Uri filter"
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "Description filter"
										},
										{
											"key": "type",
											"value": "<string>",
											"description": "Type filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of resource documents. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/resources?uri=documentURI</pre></div>\n <p>Returns resource document with uri \"documentURI\".</p>\n <div class=\"code indent\"><pre>/restman/1.0/resources?type=xmlschema</pre></div>\n <p>Returns resource documents of xmlschema type</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/resources?sort=<string>&order=<string>&uri=<string>&description=<string>&type=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"resources"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "uri",
													"value": "<string>"
												},
												{
													"key": "description",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/resources",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/resources",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"resources"
									]
								},
								"description": "Creates a new resource document\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/resources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"resources"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/resources/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/resources/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"resources",
										"template"
									]
								},
								"description": "Returns a template, which is an example resource document that can be used as a reference for what resource\n document objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/resources/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"resources",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "revocation Checking Policies",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/revocationCheckingPolicies/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/revocationCheckingPolicies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"revocationCheckingPolicies",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the revocation checking policy to delete."
												}
											]
										},
										"description": "Deletes an existing revocation checking policy.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/revocationCheckingPolicies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"revocationCheckingPolicies",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the revocation checking policy to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/revocationCheckingPolicies/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/revocationCheckingPolicies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"revocationCheckingPolicies",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the revocation checking policy to return"
												}
											]
										},
										"description": "Returns a revocation checking policy with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/revocationCheckingPolicies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"revocationCheckingPolicies",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the revocation checking policy to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/revocationCheckingPolicies/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/revocationCheckingPolicies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"revocationCheckingPolicies",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the revocation checking policy to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing revocation checking policy. If an revocation checking policy with the given ID\n does not exist one will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/revocationCheckingPolicies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"revocationCheckingPolicies",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the revocation checking policy to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/revocationCheckingPolicies",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/revocationCheckingPolicies?sort=<string>&order=<string>&name=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"revocationCheckingPolicies"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of revocation checking policies. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/revocationCheckingPolicies?name=MyRevocationCheckPolicy</pre></div>\n <p>Returns revocation checking policy with name \"MyRevocationCheckPolicy\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/revocationCheckingPolicies?sort=<string>&order=<string>&name=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"revocationCheckingPolicies"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/revocationCheckingPolicies",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/revocationCheckingPolicies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"revocationCheckingPolicies"
									]
								},
								"description": "Creates a new revocation checking policy\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/revocationCheckingPolicies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"revocationCheckingPolicies"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/revocationCheckingPolicies/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/revocationCheckingPolicies/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"revocationCheckingPolicies",
										"template"
									]
								},
								"description": "Returns a template, which is an example revocation checking policy that can be used as a reference for what\n revocation checking policy objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/revocationCheckingPolicies/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"revocationCheckingPolicies",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "roles",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "assignments",
									"item": [
										{
											"name": "/1.0/roles/:id/assignments",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/roles/:id/assignments?id=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"roles",
														":id",
														"assignments"
													],
													"query": [
														{
															"key": "id",
															"value": "<string>",
															"description": "The assignments to remove"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												},
												"description": "Removes role assignments\nDelete Assignment"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/roles/:id/assignments?id=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"roles",
																":id",
																"assignments"
															],
															"query": [
																{
																	"key": "id",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "/1.0/roles/:id/assignments",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/roles/:id/assignments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"roles",
														":id",
														"assignments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												},
												"description": "Adds role assignments to the role.\nAdd Assignment"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/roles/:id/assignments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"roles",
																":id",
																"assignments"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "/1.0/roles/:id/assignments/template/addassignments",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/roles/:id/assignments/template/addassignments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"roles",
														":id",
														"assignments",
														"template",
														"addassignments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												},
												"description": "Returns a template, which is an example add assignments context that can be used as a reference for what add\n assignments context objects should look like.\nAdd Assignments Context Template"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/roles/:id/assignments/template/addassignments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"roles",
																":id",
																"assignments",
																"template",
																"addassignments"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "/1.0/roles/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/roles/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"roles",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the role to delete."
												}
											]
										},
										"description": "Deletes an existing role.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/roles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"roles",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the role to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/roles/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/roles/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"roles",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the role to return"
												}
											]
										},
										"description": "Returns a role with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/roles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"roles",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the role to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/roles/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/roles/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"roles",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the role to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing role. If a role with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/roles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"roles",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the role to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/roles",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/roles?sort=<string>&order=<string>&name=<string>&userCreated=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"roles"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                    ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "userCreated",
											"value": "<boolean>",
											"description": "User created filter"
										}
									]
								},
								"description": "<p>Returns a list of roles. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/roles?name=MyRole</pre></div>\n <p>Returns role with name \"MyRole\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/roles?sort=<string>&order=<string>&name=<string>&userCreated=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"roles"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "userCreated",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/roles",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"roles"
									]
								},
								"description": "Creates a new role\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/roles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"roles"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/roles/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/roles/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"roles",
										"template"
									]
								},
								"description": "Returns a template, which is an example role that can be used as a reference for what role objects should look\n like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/roles/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"roles",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "sample Messages",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/sampleMessages/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/sampleMessages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"sampleMessages",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the sample message to delete."
												}
											]
										},
										"description": "Deletes an existing sample message.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/sampleMessages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"sampleMessages",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the sample message to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/sampleMessages/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/sampleMessages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"sampleMessages",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the sample message to return"
												}
											]
										},
										"description": "Returns a sample message with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/sampleMessages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"sampleMessages",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the sample message to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/sampleMessages/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/sampleMessages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"sampleMessages",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the sample message to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing sample message. If a sample message with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nUpdate"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/sampleMessages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"sampleMessages",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the sample message to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/sampleMessages",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/sampleMessages?sort=<string>&order=<string>&name=<string>&operationName=<string>&service.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"sampleMessages"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "operationName",
											"value": "<string>",
											"description": "Operation filter"
										},
										{
											"key": "service.id",
											"value": "<string>",
											"description": "Service ID filter"
										}
									]
								},
								"description": "<p>Returns a list of sample messages. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/sampleMessages?name=MySampleMessage</pre></div>\n <p>Returns sample message with name \"MySampleMessage\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/sampleMessages?sort=<string>&order=<string>&name=<string>&operationName=<string>&service.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"sampleMessages"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "operationName",
													"value": "<string>"
												},
												{
													"key": "service.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/sampleMessages",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/sampleMessages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"sampleMessages"
									]
								},
								"description": "Creates a new sample message\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/sampleMessages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"sampleMessages"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/sampleMessages/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/sampleMessages/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"sampleMessages",
										"template"
									]
								},
								"description": "Returns a template, which is an example sample message that can be used as a reference for what sample message objects\n should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/sampleMessages/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"sampleMessages",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "scheduled Tasks",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/scheduledTasks/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/scheduledTasks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"scheduledTasks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the scheduled task to delete."
												}
											]
										},
										"description": "Deletes an existing scheduled task.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/scheduledTasks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"scheduledTasks",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the scheduled task to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/scheduledTasks/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/scheduledTasks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"scheduledTasks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the scheduled task to return"
												}
											]
										},
										"description": "Returns a scheduled task with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/scheduledTasks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"scheduledTasks",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the scheduled task to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/scheduledTasks/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/scheduledTasks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"scheduledTasks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the scheduled task to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing Scheduled task. If a scheduled task with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/scheduledTasks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"scheduledTasks",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the scheduled task to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/scheduledTasks",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/scheduledTasks?sort=<string>&order=<string>&name=<string>&node=<string>&type=<string>&status=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"scheduledTasks"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "node",
											"value": "<string>",
											"description": "Node filter; \"all\" or \"one\""
										},
										{
											"key": "type",
											"value": "<string>",
											"description": "Job Type filter"
										},
										{
											"key": "status",
											"value": "<string>",
											"description": "Job Status filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of scheduled tasks. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/scheduledTasks?name=MyScheduledTask</pre></div>\n <p>Returns scheduled task with name \"MyScheduledTask\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/scheduledTasks?sort=<string>&order=<string>&name=<string>&node=<string>&type=<string>&status=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"scheduledTasks"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "node",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/scheduledTasks",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/scheduledTasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"scheduledTasks"
									]
								},
								"description": "Creates a new scheduled task\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/scheduledTasks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"scheduledTasks"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/scheduledTasks/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/scheduledTasks/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"scheduledTasks",
										"template"
									]
								},
								"description": "Returns a template, which is an example scheduled task that can be used as a reference for what scheduled task\n objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/scheduledTasks/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"scheduledTasks",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "security Zones",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/securityZones/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/securityZones/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"securityZones",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the security zone to delete."
												}
											]
										},
										"description": "Deletes an existing security zone.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/securityZones/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"securityZones",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the security zone to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/securityZones/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/securityZones/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"securityZones",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the security zone to return"
												}
											]
										},
										"description": "Returns a security zone with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/securityZones/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"securityZones",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the security zone to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/securityZones/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/securityZones/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"securityZones",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the security zone to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing security zone. If an security zone with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/securityZones/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"securityZones",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the security zone to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/securityZones",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/securityZones?sort=<string>&order=<string>&name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"securityZones"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n              ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										}
									]
								},
								"description": "<p>Returns a list of security zones. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/securityZones?name=MySecurityZone</pre></div>\n <p>Returns security zone with name \"MySecurityZone\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/securityZones?sort=<string>&order=<string>&name=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"securityZones"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/securityZones",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/securityZones",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"securityZones"
									]
								},
								"description": "Creates a new security zone\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/securityZones",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"securityZones"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/securityZones/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/securityZones/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"securityZones",
										"template"
									]
								},
								"description": "Returns a template, which is an example security zone that can be used as a reference for what security zone\n objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/securityZones/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"securityZones",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "server Module Files",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/serverModuleFiles/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/serverModuleFiles/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"serverModuleFiles",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The id of the ServerModuleFile to delete."
												}
											]
										},
										"description": "Deletes an existing ServerModuleFile.\n <p>When ServerModuleFile functionality is disabled this method will fail with FORBIDDEN (403).</p>\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/serverModuleFiles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"serverModuleFiles",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The id of the ServerModuleFile to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/serverModuleFiles/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/serverModuleFiles/:id?includeData=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"serverModuleFiles",
												":id"
											],
											"query": [
												{
													"key": "includeData",
													"value": "false",
													"description": "Optionally include the module data bytes, defaults to false if not specified."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The id of the ServerModuleFile to retrieve."
												}
											]
										},
										"description": "Returns a ServerModuleFile with the given id.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/serverModuleFiles/:id?includeData=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"serverModuleFiles",
														":id"
													],
													"query": [
														{
															"key": "includeData",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The id of the ServerModuleFile to retrieve."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/serverModuleFiles/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/serverModuleFiles/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"serverModuleFiles",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the ServerModuleFile to create or update"
												}
											]
										},
										"description": "Creates a new ServerModuleFile with specified ID. <br/>\n If a ServerModuleFile with the given ID does not exist one will be created and its data uploaded,\n otherwise method will fail with FORBIDDEN (403).<br/>\n Note that module data update is not currently supported and this method will fail with FORBIDDEN (403).\n To update the module data delete and re-upload the module with newer version again.\n <p>When ServerModuleFile functionality is disabled this method will fail with FORBIDDEN (403).</p>\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/serverModuleFiles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"serverModuleFiles",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the ServerModuleFile to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/serverModuleFiles",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/serverModuleFiles?sort=<string>&order=<string>&name=<string>&type=<string>&includeData=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"serverModuleFiles"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "The sort key to sort the list by; 'id'=GOID, 'name'=name, 'type'=module_type."
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to ascending if not specified."
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter."
										},
										{
											"key": "type",
											"value": "<string>",
											"description": "Module Type filter."
										},
										{
											"key": "includeData",
											"value": "false",
											"description": "Optionally include the module data bytes, defaults to false if not specified."
										}
									]
								},
								"description": "<p>Returns a list of ServerModuleFiles. Can optionally sort the resulting list in ascending or\n descending order and optionally include the module data. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/serverModuleFiles?name=MyServerModuleFile</pre></div>\n <p>Returns ServerModuleFile with name \"MyServerModuleFile\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/serverModuleFiles?sort=<string>&order=<string>&name=<string>&type=<string>&includeData=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"serverModuleFiles"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "<string>"
												},
												{
													"key": "includeData",
													"value": "false"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/serverModuleFiles",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/serverModuleFiles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"serverModuleFiles"
									]
								},
								"description": "<p>Creates a new ServerModuleFile. The properties are optional but you may specify:</p>\n <table class=\"properties-table\" cellpadding=\"0\" cellspacing=\"0\">\n <tr><th>Key</th><th>Type</th><th>Description</th></tr>\n <tr>\n <td>moduleFileName</td>\n <td>String</td>\n <td>The module original File Name.\n Optional and if not specified empty text will be shown under Manage Server Module Files dialog in the Policy Manager.</td>\n </tr>\n <tr>\n <td>moduleSize</td>\n <td>String</td>\n <td>This is the module data-bytes size in bytes.\n Should not be assumed to be 100% reliable, and is intended to be used for display purposes.\n Optional and if not specified the size will be calculated from the specified module data-bytes.</td>\n </tr>\n <tr>\n <td>moduleAssertions</td>\n <td>String</td>\n <td>Comma separated list of Module Assertion ClassNames.\n Optional and if not specified empty text will be shown under Server Module Files Properties dialog in the Policy Manager.</td>\n </tr>\n </table>\n <p class=\"italicize\">Example request:</p>\n <div class=\"code\">\n <pre>\n &lt;l7:ServerModuleFile xmlns:l7=&quot;http://ns.l7tech.com/2010/04/gateway-management&quot;&gt;\n     &lt;l7:Name&gt;module name&lt;/l7:Name&gt;\n     .......\n     &lt;l7:Properties&gt;\n         &lt;l7:Property key=&quot;moduleAssertions&quot;&gt;\n              &lt;l7:StringValue&gt;TestAssertion1,TestAssertion2&lt;/l7:StringValue&gt;\n         &lt;/l7:Property&gt;\n         &lt;l7:Property key=&quot;moduleFileName&quot;&gt;\n              &lt;l7:StringValue&gt;testAssertion.jar&lt;/l7:StringValue&gt;\n         &lt;/l7:Property&gt;\n         &lt;l7:Property key=&quot;moduleSize&quot;&gt;\n              &lt;l7:StringValue&gt;38191&lt;/l7:StringValue&gt;\n         &lt;/l7:Property&gt;\n     &lt;/l7:Properties&gt;\n &lt;/l7:ServerModuleFile&gt;\n </pre>\n </div>\n <p>When ServerModuleFile functionality is disabled this method will fail with FORBIDDEN (403).</p>\n <p>This responds with a reference to the newly created ServerModuleFile.</p>\nUpload"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/serverModuleFiles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"serverModuleFiles"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/serverModuleFiles/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/serverModuleFiles/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"serverModuleFiles",
										"template"
									]
								},
								"description": "Returns a template, which is an example ServerModuleFile that can be used as a reference\n for what ServerModuleFile objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/serverModuleFiles/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"serverModuleFiles",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "service Aliases",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/serviceAliases/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/serviceAliases/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"serviceAliases",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the service alias to delete."
												}
											]
										},
										"description": "Deletes an existing service alias.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/serviceAliases/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"serviceAliases",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the service alias to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/serviceAliases/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/serviceAliases/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"serviceAliases",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the service alias to return"
												}
											]
										},
										"description": "Returns a service alias with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/serviceAliases/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"serviceAliases",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the service alias to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/serviceAliases/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/serviceAliases/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"serviceAliases",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the service alias to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing service alias. If a service alias with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nUpdate Or Create"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/serviceAliases/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"serviceAliases",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the service alias to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/serviceAliases",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/serviceAliases?sort=<string>&order=<string>&service.id=<string>&folder.id=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"serviceAliases"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "service.id",
											"value": "<string>",
											"description": "Service id filter"
										},
										{
											"key": "folder.id",
											"value": "<string>",
											"description": "Folder id filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of service aliases. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/serviceAliases?service.id=26df9b0abc4dd6780fd9da5929cde13e</pre></div>\n <p>Returns service aliases for service with ID \"26df9b0abc4dd6780fd9da5929cde13e\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/serviceAliases?sort=<string>&order=<string>&service.id=<string>&folder.id=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"serviceAliases"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "service.id",
													"value": "<string>"
												},
												{
													"key": "folder.id",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/serviceAliases",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/serviceAliases",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"serviceAliases"
									]
								},
								"description": "Creates a new service alias\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/serviceAliases",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"serviceAliases"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/serviceAliases/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/serviceAliases/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"serviceAliases",
										"template"
									]
								},
								"description": "Returns a template, which is an example service alias that can be used as a reference for what service alias\n objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/serviceAliases/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"serviceAliases",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "services",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "versions",
									"item": [
										{
											"name": "active",
											"item": [
												{
													"name": "/1.0/services/:id/versions/active",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/services/:id/versions/active",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"services",
																":id",
																"versions",
																"active"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														},
														"description": "Returns the active policy version.\nGet Active Version"
													},
													"response": [
														{
															"name": "Successful Response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/services/:id/versions/active",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"services",
																		":id",
																		"versions",
																		"active"
																	],
																	"variable": [
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "/1.0/services/:id/versions/active/comment",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/services/:id/versions/active/comment",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"services",
																":id",
																"versions",
																"active",
																"comment"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														},
														"description": "Sets a comment on the active policy version\nSet Active Version Comment"
													},
													"response": [
														{
															"name": "Successful Response",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/services/:id/versions/active/comment",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"services",
																		":id",
																		"versions",
																		"active",
																		"comment"
																	],
																	"variable": [
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "{version Number}",
											"item": [
												{
													"name": "/1.0/services/:id/versions/:versionNumber",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/services/:id/versions/:versionNumber",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"services",
																":id",
																"versions",
																":versionNumber"
															],
															"variable": [
																{
																	"key": "versionNumber",
																	"value": "<long>",
																	"description": "(Required) Version of the policy to return."
																}
															]
														},
														"description": "Retrieve a policy version by the version number\nGet Version"
													},
													"response": [
														{
															"name": "Successful Response",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/services/:id/versions/:versionNumber",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"services",
																		":id",
																		"versions",
																		":versionNumber"
																	],
																	"variable": [
																		{
																			"key": "versionNumber",
																			"value": "<long>",
																			"description": "(Required) Version of the policy to return."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "/1.0/services/:id/versions/:versionNumber/activate",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/services/:id/versions/:versionNumber/activate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"services",
																":id",
																"versions",
																":versionNumber",
																"activate"
															],
															"variable": [
																{
																	"key": "versionNumber",
																	"value": "<long>",
																	"description": "(Required) Version of the policy version to set active."
																}
															]
														},
														"description": "Activates the specified policy version\nActivate Version"
													},
													"response": [
														{
															"name": "Successful Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/services/:id/versions/:versionNumber/activate",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"services",
																		":id",
																		"versions",
																		":versionNumber",
																		"activate"
																	],
																	"variable": [
																		{
																			"key": "versionNumber",
																			"value": "<long>",
																			"description": "(Required) Version of the policy version to set active."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "/1.0/services/:id/versions/:versionNumber/comment",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/services/:id/versions/:versionNumber/comment",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"services",
																":id",
																"versions",
																":versionNumber",
																"comment"
															],
															"variable": [
																{
																	"key": "versionNumber",
																	"value": "<long>",
																	"description": "(Required) Version of the policy version to set the comment on."
																}
															]
														},
														"description": "Sets the comment on a specific policy version.\nSet Version Comment"
													},
													"response": [
														{
															"name": "Successful Response",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/1.0/services/:id/versions/:versionNumber/comment",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"1.0",
																		"services",
																		":id",
																		"versions",
																		":versionNumber",
																		"comment"
																	],
																	"variable": [
																		{
																			"key": "versionNumber",
																			"value": "<long>",
																			"description": "(Required) Version of the policy version to set the comment on."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "/1.0/services/:id/versions",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/services/:id/versions?sort=<string>&order=<string>&id=<string>&active=<boolean>&comment=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"services",
														":id",
														"versions"
													],
													"query": [
														{
															"key": "sort",
															"value": "<string>",
															"description": "Key to sort the list by"
														},
														{
															"key": "order",
															"value": "<string>",
															"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                 ascending if not specified"
														},
														{
															"key": "id",
															"value": "<string>",
															"description": "Id filter"
														},
														{
															"key": "active",
															"value": "<boolean>",
															"description": "Active filter"
														},
														{
															"key": "comment",
															"value": "<string>",
															"description": "Comment filter"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												},
												"description": "<p>Returns a list of policy versions. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList Versions"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/services/:id/versions?sort=<string>&order=<string>&id=<string>&active=<boolean>&comment=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"services",
																":id",
																"versions"
															],
															"query": [
																{
																	"key": "sort",
																	"value": "<string>"
																},
																{
																	"key": "order",
																	"value": "<string>"
																},
																{
																	"key": "id",
																	"value": "<string>"
																},
																{
																	"key": "active",
																	"value": "<boolean>"
																},
																{
																	"key": "comment",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "/1.0/services/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/services/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"services",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the service to delete."
												}
											]
										},
										"description": "Deletes an existing service.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/services/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"services",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the service to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/services/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/services/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"services",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the service to return"
												}
											]
										},
										"description": "Returns a service with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/services/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"services",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the service to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/services/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/services/:id?active=true&versionComment=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"services",
												":id"
											],
											"query": [
												{
													"key": "active",
													"value": "true",
													"description": "Should the service be activated after the update."
												},
												{
													"key": "versionComment",
													"value": "<string>",
													"description": "The comment to add to the policy version when updating the service"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the service to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing service. If a service with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nUpdate Or Create"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/services/:id?active=true&versionComment=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"services",
														":id"
													],
													"query": [
														{
															"key": "active",
															"value": "true"
														},
														{
															"key": "versionComment",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the service to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/services/:id/dependencies",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/services/:id/dependencies?level=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"services",
												":id",
												"dependencies"
											],
											"query": [
												{
													"key": "level",
													"value": "-1",
													"description": "How deep to search for the dependencies. 0 for none, 1 for immediate dependencies, -1 for full depth search\n1.0.1"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										},
										"description": "Returns the list of dependencies for this entity.\nGet Dependencies\nGet Dependencies"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/services/:id/dependencies?level=-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"services",
														":id",
														"dependencies"
													],
													"query": [
														{
															"key": "level",
															"value": "-1"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/services",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/services?sort=<string>&order=<string>&name=<string>&guid=<string>&enabled=<boolean>&soap=<boolean>&parentFolder.id=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"services"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "guid",
											"value": "<string>",
											"description": "Guid filter"
										},
										{
											"key": "enabled",
											"value": "<boolean>",
											"description": "Enabled filter"
										},
										{
											"key": "soap",
											"value": "<boolean>",
											"description": "Soap filter"
										},
										{
											"key": "parentFolder.id",
											"value": "<string>",
											"description": "Parent folder ID filter."
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of servicees. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/services?name=MyService</pre></div>\n <p>Returns service with name \"MyService\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/services?sort=<string>&order=<string>&name=<string>&guid=<string>&enabled=<boolean>&soap=<boolean>&parentFolder.id=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"services"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "guid",
													"value": "<string>"
												},
												{
													"key": "enabled",
													"value": "<boolean>"
												},
												{
													"key": "soap",
													"value": "<boolean>"
												},
												{
													"key": "parentFolder.id",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/services",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/services?versionComment=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"services"
									],
									"query": [
										{
											"key": "versionComment",
											"value": "<string>",
											"description": "The comment to add to the policy version when creating the service"
										}
									]
								},
								"description": "Creates a new service\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/services?versionComment=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"services"
											],
											"query": [
												{
													"key": "versionComment",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/services/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/services/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"services",
										"template"
									]
								},
								"description": "Returns a template, which is an example service that can be used as a reference for what service objects should\n look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/services/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"services",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "site Minder Configurations",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/siteMinderConfigurations/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/siteMinderConfigurations/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"siteMinderConfigurations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the SiteMinder configuration to delete."
												}
											]
										},
										"description": "Deletes an existing SiteMinder configuration.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/siteMinderConfigurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"siteMinderConfigurations",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the SiteMinder configuration to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/siteMinderConfigurations/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/siteMinderConfigurations/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"siteMinderConfigurations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the SiteMinder configuration to return"
												}
											]
										},
										"description": "Returns a SiteMinder configuration with the given ID.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/siteMinderConfigurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"siteMinderConfigurations",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the SiteMinder configuration to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/siteMinderConfigurations/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/siteMinderConfigurations/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"siteMinderConfigurations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the SiteMinder configuration to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing SiteMinder configuration. If a SiteMinder configuration with the given ID does not\n exist one\n will be created, otherwise the existing one will be updated.\nUpdate"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/siteMinderConfigurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"siteMinderConfigurations",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the SiteMinder configuration to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/siteMinderConfigurations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/siteMinderConfigurations?sort=<string>&order=<string>&name=<string>&enabled=<boolean>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"siteMinderConfigurations"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "enabled",
											"value": "<boolean>",
											"description": "Enabled filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of SiteMinder configurations. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/siteMinderConfigurations?name=MySiteMinderConfiguration</pre></div>\n <p>Returns SiteMinder configuration with name \"MySiteMinderConfiguration\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/siteMinderConfigurations?sort=<string>&order=<string>&name=<string>&enabled=<boolean>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"siteMinderConfigurations"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "enabled",
													"value": "<boolean>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/siteMinderConfigurations",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/siteMinderConfigurations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"siteMinderConfigurations"
									]
								},
								"description": "Creates a new SiteMinder configuration\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/siteMinderConfigurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"siteMinderConfigurations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/siteMinderConfigurations/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/siteMinderConfigurations/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"siteMinderConfigurations",
										"template"
									]
								},
								"description": "Returns a template, which is an example SiteMinder configuration that can be used as a reference for what\n SiteMinder configuration objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/siteMinderConfigurations/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"siteMinderConfigurations",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "solution Kit Managers",
					"item": [
						{
							"name": "/1.0/solutionKitManagers",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/solutionKitManagers?id=<string>&childId=<string>&name=<string>&childName=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"solutionKitManagers"
									],
									"query": [
										{
											"key": "id",
											"value": "<string>",
											"description": "Solution kit GUID and instance modifier of a single solution kit or a collection of solution kits to delete."
										},
										{
											"key": "childId",
											"value": "<string>",
											"description": "GUID and instance modifier of child solution kits to delete"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Solution kit name and instance modifier of a single solution kit or a collection of solution kits to delete.\n1.0.6"
										},
										{
											"key": "childName",
											"value": "<string>",
											"description": "name and instance modifier of child solution kits to delete\n1.0.6"
										}
									]
								},
								"description": "Uninstall the Solution Kit record and the entities installed from the original SKAR (if delete mappings were provided by the SKAR author).\n <ul>\n     <li>Use a <code>DELETE</code> request.</li>\n     <li>Specify the Solution Kit ID as a query parameter in the URL. The ID consists of two parts, solution kit GUID and instance modifier used. The two parts are separated by \"::\".</li>\n     <li>Four types of ID URL format:\n          <ul>\n              <li>https://localhost:8443/restman/1.0/solutionKitManagers?id=[Non-Parent_GUID]::[IM]</li>\n              <li>https://localhost:8443/restman/1.0/solutionKitManagers?id=[Parent_GUID]::[IM]</li>\n              <li>https://localhost:8443/restman/1.0/solutionKitManagers?id=[Parent_GUID]</li>\n              <li>https://localhost:8443/restman/1.0/solutionKitManagers?id=[Parent_GUID]::[IM]&childId=[Child_1_GUID]...&childId=[Child_n_GUID]</li>\n          </ul>\n     </li>\n     <li>Alternatively, specify Solution Kit name (instead of ID) as a query parameter in the URL.\n          <ul>\n              <li>https://localhost:8443/restman/1.0/solutionKitManagers?name=[Non-Parent_name]::[IM]</li>\n              <li>https://localhost:8443/restman/1.0/solutionKitManagers?name=[Parent_name]::[IM]</li>\n              <li>https://localhost:8443/restman/1.0/solutionKitManagers?name=[Parent_name]</li>\n              <li>https://localhost:8443/restman/1.0/solutionKitManagers?name=[Parent_name]::[IM]&childName=[Child_1_name]...&childName=[Child_n_name]</li>\n          </ul>\n     </li>\n </ul>\n In the URL, [IM] is an instance modifier, which combines with a GUID to find a unique solution kit. If [IM] is missed, then a default instance modifier (empty value) will be used.\n <ul>\n     <li>Use the type (1), if deleting a single non-parent solution kit.</li>\n     <li>Use the type (2), if deleting all child solution kits with the specified instance modifier.</li>\n     <li>Use the type (3), if deleting all child solution kits without an instance modifier.</li>\n     <li>Use the type (4), if deleting some of child solution kits specified by an instance modifier [IM]. Omit \"::[IM]\" part of the request to delete some child solution kits without an instance modifier.</li>\n </ul>\nUninstall"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/solutionKitManagers?id=<string>&childId=<string>&name=<string>&childName=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"solutionKitManagers"
											],
											"query": [
												{
													"key": "id",
													"value": "<string>"
												},
												{
													"key": "childId",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "childName",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/solutionKitManagers",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/solutionKitManagers?id=<string>&name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"solutionKitManagers"
									],
									"query": [
										{
											"key": "id",
											"value": "<string>",
											"description": "Optional, note this is a query parameter, not a form key-value. Select which Solution Kit ID in the uploaded SKAR to upgrade."
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Optional, note this is a query parameter, not a form key-value. Select Solution Kit by name, instead of by ID.\n1.0.6"
										}
									]
								},
								"description": "Install or upgrade a SKAR file.\n\n <h5>To Install</h5>\n <ul>\n \t<li>Upload a SKAR file using a <code>POST</code> request.</li>\n \t<li>Set the encoding to <code>multipart/form-data</code>.</li>\n \t<li>Set the file upload form-field name as <code>file</code>.  The uploaded file has to be signed (*.sskar format).</li>\n \t<li>\n \t    Add other form-field name and value as needed.\n \t    <ul>\n \t        <li>\n \t            <code>entityIdReplace</code>. Optional. To map one entity ID (from the SKAR) to an existing gateway entity ID to resolve entity conflict. Format [find_id]::[replace_with_id]</>.\n \t            <ul>\n                  <li>The Solution Kit Manager will replace the entity ID to the left of the double colon (::) with the entity ID to the right. E.g. set <code>entityIdReplace</code> to <code>f1649a0664f1ebb6235ac238a6f71a6d::66461b24787941053fc65a626546e4bd</code>.</li>\n \t                <li>Multiple values accepted (values from multiple fields with the same form-field name are treated as a list of values).</li>\n \t                <li><b>Mapping must be overridable</b> from the solution kit author (e.g. mapping with srcId=[find_id] has <code>SK_AllowMappingOverride = true</code>). An error occurs when attempting to replace an non-overridable mapping.</li>\n \t            </ul>\n \t        </li>\n \t        <li>\n \t            <code>solutionKitSelect</code>: Optional. To select which solution kit in the uploaded SKAR will be installed and what instance modifier will be applied to the installed instance.\n              <ul>\n                  <li>The value format of <code>solutionKitSelect</code> is [ID]::[IM], where <i>\"::\"</i> is a deliminator, [ID] is the GUID of the installed solution kit, and [IM] is the instance modifier applied to the installed instance. If [IM] is not specified, or the value of [IM] is empty, then the default instance modifier (empty value) is used.</li>\n \t                <li>If no <code>solutionKitSelect</code> provided, all solution kit(s) in the upload SKAR will be installed.</li>\n \t                <li>Multiple <code>solutionKitSelect</code> allowed: to specify multiple solution kits to install.</li>\n \t                <li>Note: the value of each instance modifier should not include \"::\", since \"::\" is a reserved delimiter.</li>\n \t            </ul>\n \t         </li>\n \t        <li>\n \t            <code>solutionKitSelectByName</code>: Since 1.0.6. Optional. To select which solution kit by name (instead of <code>solutionKitSelect</code>, which is by ID). The value format of <code>solutionKitSelectByName</code> is [name]::[IM], see <code>solutionKitSelect</code> for details.\n \t        </li>\n \t         <li>\n \t             <code>instanceModifier</code>. Optional. To specify an instance modifier applied to all installed solution kits. By default, if this form field is not specified or its value is empty, then this instance modifier uses a default value (empty value).\n \t             <ul>\n \t                 <li>Applying <code>instanceModifier</code> is a quick way to apply a same instance modifier to a list of solution kits that have a same instance modifier. However, this instance modifier is only applied in the following two scenarios:</li>\n \t                 <li>(1) No any <code>solutionKitSelect</code> specified (i.e., all solution kit(s) in the SKAR will be installed.)</li>\n \t                 <li>(2) Some <code>solutionKitSelect</code> specified, but without [IM] specified.</li>\n \t                 <li>Note: the value of each instance modifier should not include \"::\", since \"::\" is a reserved delimiter.</li>\n \t             </ul>\n \t         </li>\n \t        <li>Passing values to the Custom Callback. Optional. All form-fields not listed above will be passed to the Custom Callback.</li>\n \t    </ul>\n \t</li>\n </ul>\n\n <p>Here's a cURL example (note the use of the --insecure option for development only):</p>\n <code>\n      curl --user admin_user:the_password --insecure\n      --form entityIdReplace=f1649a0664f1ebb6235ac238a6f71a6d::66461b24787941053fc65a626546e4bd\n      --form entityIdReplace=0567c6a8f0c4cc2c9fb331cb03b4de6f::1e3299eab93e2935adafbf35860fc8d9\n      --form instanceModifier=AAA\n      --form solutionKitSelect=33b16742-d62d-4095-8f8d-4db707e9ad52\n      --form solutionKitSelect=33b16742-d62d-4095-8f8d-4db707e9ad53::BBB\n      --form \"file=@/<your_path>/SimpleSolutionKit-1.1-20150823.sskar\" --form MyInputTextKey=Hello\n      https://127.0.0.1:8443/restman/1.0/solutionKitManagers\n </code>\n\n <h5>To Upgrade</h5>\n Same as Install above except introducing a new query parameter <code></code>'id'</code> and changing the formats of <code>'instanceModifier'</code> and <code>'solutionKitSelect'</code>:\n <ul>\n     <li>\n         Specify a query parameter 'id' for a previous installed Solution Kit GUID in the request URL. The ID can be either a parent solution kit's GUID or a non-parent solution kit's GUID.\n         <br>For example:<code>https://127.0.0.1:8443/restman/1.0/solutionKitManagers?id=33b16742-d62d-4095-8f8d-4db707e9ad52</code>\n     </li>\n     <li>\n \t        <code>instanceModifier</code>. Optional. To specify an existing instance modifier used to combine with the id query parameter to identify a unique solution kit for upgrade.  The value format of <code>instanceModifier</code> is [Current Instance Modifier].  If this parameter is not specified, a default instance modifier will be used (default value: empty string or null).\n \t   </li>\n \t   <li>\n \t        <code>solutionKitSelect</code>: Optional. To select which child solution kits in the uploaded SKAR will be selected for upgrade. The value format of <code>solutionKitSelect</code> is [ID].\n \t   </li>\n \t   <li>\n \t        <code>solutionKitSelectByName</code>: Optional. To select by name (instead of <code>solutionKitSelect</code>, which is by ID). The value format of <code>solutionKitSelectByName</code> is [name].\n \t   </li>\n </ul>\n\n <p>Here's a cURL example (note the use of the --insecure option for development only):</p>\n <code>\n      curl --user admin_user:the_password --insecure\n      --form instanceModifier=AA\n      --form solutionKitSelect=33b16742-d62d-4095-8f8d-4db707e9ad52\n      --form solutionKitSelect=33b16742-d62d-4095-8f8d-4db707e9ad53\n      --form file=@/<your_path>/SampleSolutionKit-upgrade-version.sskar\n      https://127.0.0.1:8443/restman/1.0/solutionKitManagers?id=33b16742-d62d-4095-8f8d-4db707e9ad52\n </code>\nInstall Or Upgrade"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/solutionKitManagers?id=<string>&name=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"solutionKitManagers"
											],
											"query": [
												{
													"key": "id",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "solution Kits",
					"item": [
						{
							"name": "/1.0/solutionKits",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/solutionKits?sort=<string>&order=<string>&name=<string>&guid=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"solutionKits"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "The sort key to sort the list by; 'id'=GOID, 'name'=name, 'guid'=sk_guid, 'parent'=parent_goid."
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to ascending if not specified."
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter."
										},
										{
											"key": "guid",
											"value": "<string>",
											"description": "Guid filter."
										}
									]
								},
								"description": "<p>Returns a list of SolutionKits. Can optionally sort the resulting list in ascending or descending order.\n Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/solutionKits?name=MySolutionKit</pre></div>\n <p>Returns SolutionKit with name \"MySolutionKit\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/solutionKits?sort=<string>&order=<string>&name=<string>&guid=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"solutionKits"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "guid",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/solutionKits/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/solutionKits/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"solutionKits",
										"template"
									]
								},
								"description": "Returns a template, which is an example SolutionKit that can be used as a reference for what SolutionKit objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/solutionKits/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"solutionKits",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/solutionKits/:id",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/solutionKits/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"solutionKits",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) The id of the SolutionKit to retrieve."
										}
									]
								},
								"description": "Returns a SolutionKit with the given id.\nGet"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/solutionKits/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"solutionKits",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The id of the SolutionKit to retrieve."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "trusted Certificates",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "/1.0/trustedCertificates/:id",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/trustedCertificates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"trustedCertificates",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the certificate to delete."
												}
											]
										},
										"description": "Deletes an existing certificate.\nDelete"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/trustedCertificates/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"trustedCertificates",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the certificate to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/trustedCertificates/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/trustedCertificates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"trustedCertificates",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) The ID of the certificate to return"
												}
											]
										},
										"description": "Retrieves a certificate.\nGet"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/trustedCertificates/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"trustedCertificates",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) The ID of the certificate to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/trustedCertificates/:id",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/trustedCertificates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"trustedCertificates",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) ID of the certificate to create or update"
												}
											]
										},
										"description": "Creates or Updates an existing certificate. If a certificate with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\nCreate Or Update"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/trustedCertificates/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"trustedCertificates",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) ID of the certificate to create or update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/trustedCertificates",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/trustedCertificates?sort=<string>&order=<string>&name=<string>&securityZone.id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"trustedCertificates"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by."
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Name filter"
										},
										{
											"key": "securityZone.id",
											"value": "<string>",
											"description": "Security zone ID filter"
										}
									]
								},
								"description": "<p>Returns a list of certificates. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/trustedCertificates?name=MyCertificate</pre></div>\n <p>Returns certificates with name \"MyCertificate\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/trustedCertificates?sort=<string>&order=<string>&name=<string>&securityZone.id=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"trustedCertificates"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "securityZone.id",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/trustedCertificates",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/trustedCertificates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"trustedCertificates"
									]
								},
								"description": "Creates a new certificate\nCreate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/trustedCertificates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"trustedCertificates"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/trustedCertificates/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/trustedCertificates/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"trustedCertificates",
										"template"
									]
								},
								"description": "Returns a template, which is an example certificate that can be used as a reference for what certificate objects should look like.\nTemplate"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/trustedCertificates/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"trustedCertificates",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "{user ID}",
							"item": [
								{
									"name": "certificate",
									"item": [
										{
											"name": "/1.0/users/:userID/certificate",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/users/:userID/certificate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"users",
														":userID",
														"certificate"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<string>",
															"description": "(Required) The ID of the user"
														}
													]
												},
												"description": "Removes the certificate from the user\nDelete User Certificate"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/users/:userID/certificate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"users",
																":userID",
																"certificate"
															],
															"variable": [
																{
																	"key": "userID",
																	"value": "<string>",
																	"description": "(Required) The ID of the user"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "/1.0/users/:userID/certificate",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/users/:userID/certificate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"users",
														":userID",
														"certificate"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<string>",
															"description": "(Required) The ID of the user"
														}
													]
												},
												"description": "Gets the user's certificate\nGet User Certificate"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/users/:userID/certificate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"users",
																":userID",
																"certificate"
															],
															"variable": [
																{
																	"key": "userID",
																	"value": "<string>",
																	"description": "(Required) The ID of the user"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "/1.0/users/:userID/certificate",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/users/:userID/certificate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"users",
														":userID",
														"certificate"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<string>",
															"description": "(Required) The ID of the user"
														}
													]
												},
												"description": "Set this user's certificate\nSet User Certificate"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/1.0/users/:userID/certificate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"1.0",
																"users",
																":userID",
																"certificate"
															],
															"variable": [
																{
																	"key": "userID",
																	"value": "<string>",
																	"description": "(Required) The ID of the user"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "/1.0/users/:userID",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/users/:userID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"users",
												":userID"
											],
											"variable": [
												{
													"key": "userID",
													"value": "<string>",
													"description": "(Required) The ID of the user to delete."
												}
											]
										},
										"description": "Deletes an existing user\nDelete User"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/users/:userID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"users",
														":userID"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<string>",
															"description": "(Required) The ID of the user to delete."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/users/:userID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/users/:userID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"users",
												":userID"
											],
											"variable": [
												{
													"key": "userID",
													"value": "<string>",
													"description": "(Required) The ID of the user to return"
												}
											]
										},
										"description": "Returns a user with the given ID.\nGet User"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/users/:userID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"users",
														":userID"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<string>",
															"description": "(Required) The ID of the user to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/users/:userID",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/users/:userID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"users",
												":userID"
											],
											"variable": [
												{
													"key": "userID",
													"value": "<string>",
													"description": "(Required) The ID of the user to update"
												}
											]
										},
										"description": "Updates an existing user\nUpdate User"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/users/:userID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"users",
														":userID"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<string>",
															"description": "(Required) The ID of the user to update"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/1.0/users/:userID/password",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/users/:userID/password?format=plain",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"users",
												":userID",
												"password"
											],
											"query": [
												{
													"key": "format",
													"value": "plain",
													"description": "The format of the password. \"plain\" or \"sha512crypt\""
												}
											],
											"variable": [
												{
													"key": "userID",
													"value": "<string>",
													"description": "(Required) The ID of the user"
												}
											]
										},
										"description": "Change this user's password\nChange User Password"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/1.0/users/:userID/password?format=plain",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"1.0",
														"users",
														":userID",
														"password"
													],
													"query": [
														{
															"key": "format",
															"value": "plain"
														}
													],
													"variable": [
														{
															"key": "userID",
															"value": "<string>",
															"description": "(Required) The ID of the user"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/1.0/users",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/users?sort=<string>&order=<string>&login=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"users"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>",
											"description": "Key to sort the list by."
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n               ascending if not specified"
										},
										{
											"key": "login",
											"value": "<string>",
											"description": "Login filter"
										}
									]
								},
								"description": "<p>Returns a list of users. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\nList Users"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/users?sort=<string>&order=<string>&login=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"users"
											],
											"query": [
												{
													"key": "sort",
													"value": "<string>"
												},
												{
													"key": "order",
													"value": "<string>"
												},
												{
													"key": "login",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/users",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"users"
									]
								},
								"description": "Creates a new user. New users can only be created on the internal identity provider.\nCreate User"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/1.0/users/template",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/users/template",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"users",
										"template"
									]
								},
								"description": "Returns a template, which is an example user that can be used as a reference for what user objects should look\n like.\nTemplate User"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/1.0/users/template",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"1.0",
												"users",
												"template"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "/1.0/policyBundleInstallers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/1.0/policyBundleInstallers?installer_name=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"1.0",
								"policyBundleInstallers"
							],
							"query": [
								{
									"key": "installer_name",
									"value": "<string>",
									"description": "name of installer instance to use (e.g. OAuthInstaller)"
								}
							]
						},
						"description": "<p>Executes a Policy Bundle Installer action.  Choose the installer instance by setting HTTP parameter <code>installer_name</code> (e.g. set to <code>OAuthInstaller</code>).</p>\n\n <p>The following actions are supported: list components, restman get migration bundle XML, wsman dry run install, wsman install and custom.\n For restman bundle, get migration bundle.  For wsman bundle, execute dry run and install.</p>\n\n Provides actions through the following HTTP parameters:\n <h5>\n \tList components\n </h5>\n <p>\n \tList component id(s) available for this installer bundle.  This is the default if no action parameter is provided.\n </p>\n <p>\n \tInput HTTP parameter: set <code>action</code> to <code>list</code>\n </p>\n <p>\n \tOutput: List of component id(s), \";\" separated. For example:\n </p>\n <pre>1c2a2874-df8d-4e1d-b8b0-099b576407e1;ba525763-6e55-4748-9376-76055247c8b1;f69c7d15-4999-4761-ab26-d29d58c0dd57;b082274b-f00e-4fbf-bbb7-395a95ca2a35;a07924c0-0265-42ea-90f1-2428e31ae5ae;\n </pre>\n <h5>\n \tRestman get migration bundle\n </h5>\n <p>\n \tGet the restman migration bundle XML for the given component(s).\n </p>\n <p>\n \tInput HTTP parameters:\n </p>\n <ul>\n \t<li>\n \t\tSet <code>action</code> to <code>restman_get</code>\n \t</li>\n \t<li>\n \t\tSet <code>component_ids</code> to a \";\" separated list of component ids. Or set to <code>all</code> to specify all available installer components.\n \t\tThis is equivalent to all component id(s) from the <code>list</code> action.\n \t</li>\n \t<li>\n \t\tOptionally set <code>version_modifier</code> - optional version modifier\n \t</li>\n \t<li>\n \t\tOptionally set <code>folder_goid</code> - optional install folder (if not set, defaults to root folder)\n \t</li>\n </ul>\n <p>\n \tOutput: The restman migration bundle XML for each component. For example:\n </p>\n <pre>&lt;l7:Bundle xmlns:l7=\"<a rel=\"nofollow\" href=\"http://ns.l7tech.com/2010/04/gateway-management\">http://ns.l7tech.com/2010/04/gateway-management</a>\"&gt;\n     &lt;l7:References&gt;\n         &lt;l7:Item&gt;\n          ...\n         &lt;/l7:Mapping&gt;\n     &lt;/l7:Mappings&gt;\n &lt;/l7:Bundle&gt;\n </pre>\n <h5>\n \tWsman dry run install\n </h5>\n <p>\n \tExecute wsman dry run install for given component(s).\n </p>\n <p>\n \tInput HTTP parameters:\n </p>\n <ul>\n \t<li>\n \t\tSet <code>action</code> to <code>wsman_dry_run</code>\n \t</li>\n \t<li>\n \t\tSet <code>component_ids</code> to a \";\" separated list of component ids. Or set to <code>all</code> to specify all available installer components.\n \t\tThis is equivalent to all component id(s) from the <code>list</code> action.\n \t</li>\n \t<li>\n \t\tOptionally set <code>version_modifier</code> - optional version modifier\n \t</li>\n \t<li>\n \t\tOptionally map JDBC connection name to new name\n \t\t<ul>\n \t\t\t<li>\n \t\t\t\tSet <code>jdbc_connection.&lt;component_id&gt;.name</code> with existing name in bundle (e.g. OAuth)\n \t\t\t</li>\n \t\t\t<li>\n \t\t\t\tSet <code>jdbc_connection.&lt;component_id&gt;.new_name</code> with a new desired name (e.g. OAuth Dev)\n \t\t\t</li>\n \t\t</ul>\n \t</li>\n </ul>\n <p>\n \tOutput: The conflicts for each component. For example:\n </p>\n <pre>ComponentId: 1c2a2874-df8d-4e1d-b8b0-099b576407e1\n ServiceConflict: /auth/oauth/v1/token;/auth/oauth/v1/authorize/website;/oauth/v1/client;/protected/resource;/auth/oauth/v1/authorize;/auth/oauth/v1/request;/auth/oauth/v1/*\n PolicyConflict: OAuth 1.0 Context Variables;Require OAuth 1.0 Token;getClientSignature;Authenticate OAuth 1.0 Parameter;Token Lifetime Context Variables;GenerateOAuthToken;OAuth Client Token Store Context Variables\n CertificateConflict:\n JdbcConnectionsThatDontExist:\n MissingAssertions:\n EncapsulatedAssertionConflict:\n ...\n </pre>\n <p>\n \tIt's recommended to <strong>not continue</strong> with installation if any conflicts are detected. Continuing the installation with detected conflicts may\n \tresult in partial installation of components. Components with detected conflicts will <strong>not</strong> be installed. As a result, references to\n \tconflicted components may incorrectly reference the previous version of the component already on the Gateway (if one exists).\n </p>\n <h5>\n \tWsman install\n </h5>\n <p>\n \tExecute wsman install for given component(s).\n </p>\n <p>\n \tInput HTTP parameters:\n </p>\n <ul>\n \t<li>\n \t\tSet <code>action</code> to <code>wsman_install</code>\n \t</li>\n \t<li>\n \t\tSet <code>component_ids</code> to a \";\" separated list of component ids. Or set to <code>all</code> to specify all available installer components.\n \t\tThis is equivalent to all component id(s) from the <code>list</code> action.\n \t</li>\n \t<li>\n \t\tOptionally set <code>version_modifier</code> - optional version modifier\n \t</li>\n \t<li>\n \t\tOptionally set <code>folder_goid</code> - optional install folder (if not set, defaults to root folder)\n \t</li>\n \t<li>\n \t\tOptionally map JDBC connection name to new name\n \t\t<ul>\n \t\t\t<li>\n \t\t\t\tSet <code>jdbc_connection.&lt;component_id&gt;.name</code> with existing name in bundle (e.g. OAuth)\n \t\t\t</li>\n \t\t\t<li>\n \t\t\t\tSet <code>jdbc_connection.&lt;component_id&gt;.new_name</code> with a new desired name (e.g. OAuth Dev)\n \t\t\t</li>\n \t\t</ul>\n \t</li>\n </ul>\n <p>\n \tOutput: List of installed component id(s), \";\" separated. For example:\n </p>\n <pre>1c2a2874-df8d-4e1d-b8b0-099b576407e1;ba525763-6e55-4748-9376-76055247c8b1;f69c7d15-4999-4761-ab26-d29d58c0dd57;b082274b-f00e-4fbf-bbb7-395a95ca2a35;a07924c0-0265-42ea-90f1-2428e31ae5ae\n </pre>\n <h5>\n \tCustom\n </h5>\n <p>\n \tAn installer can implement custom action, custom wsman dry run and install logic. For example the OAuth installer implements its own custom action to get a\n \tdatabase schema. It also executes custom logic to integrate API Portal for wsman dry run and install.\n </p>\n <p>\n \tInput: Set HTTP parameter <code>action</code> to <code>custom</code> in order to choose a custom action. <strong>And</strong> set HTTP parameter(s)\n \trequired for the custom installer.\n </p>\nExecute"
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1.0/policyBundleInstallers?installer_name=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1.0",
										"policyBundleInstallers"
									],
									"query": [
										{
											"key": "installer_name",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "changeme",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://localhost:8443/restman",
			"type": "string"
		}
	]
}